
Lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080036b4  080036b4  000136b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003860  08003860  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08003860  08003860  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003860  08003860  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003860  08003860  00013860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003864  08003864  00013864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08003868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  2000007c  080038e4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  080038e4  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f16e  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002574  00000000  00000000  0002f213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  00031788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  000324c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018eb6  00000000  00000000  00033110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0eb  00000000  00000000  0004bfc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089a43  00000000  00000000  0005a0b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e3af4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003df0  00000000  00000000  000e3b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800369c 	.word	0x0800369c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	0800369c 	.word	0x0800369c

0800014c <SCH_Init>:
static SCH_ERROR Error_code = SCH_OKAY;

static uint32_t report_period = SCH_REPORT_FREQ;
static uint32_t print_task_period = SCH_PRINT_TASK_FREQ;

void SCH_Init(TIM_HandleTypeDef *htim) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(htim == NULL) {
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b00      	cmp	r3, #0
 8000158:	d103      	bne.n	8000162 <SCH_Init+0x16>
		Error_code = SCH_INIT_FAIL;
 800015a:	4b0c      	ldr	r3, [pc, #48]	; (800018c <SCH_Init+0x40>)
 800015c:	2204      	movs	r2, #4
 800015e:	701a      	strb	r2, [r3, #0]
		return;
 8000160:	e011      	b.n	8000186 <SCH_Init+0x3a>
	}

	INTERRUPT_PERIOD = (htim->Instance->PSC+1)*(htim->Instance->ARR+1) / SCH_SYSCLK_FREQ;
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000168:	3301      	adds	r3, #1
 800016a:	687a      	ldr	r2, [r7, #4]
 800016c:	6812      	ldr	r2, [r2, #0]
 800016e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000170:	3201      	adds	r2, #1
 8000172:	fb02 f303 	mul.w	r3, r2, r3
 8000176:	4a06      	ldr	r2, [pc, #24]	; (8000190 <SCH_Init+0x44>)
 8000178:	fba2 2303 	umull	r2, r3, r2, r3
 800017c:	0a5b      	lsrs	r3, r3, #9
 800017e:	4a05      	ldr	r2, [pc, #20]	; (8000194 <SCH_Init+0x48>)
 8000180:	6013      	str	r3, [r2, #0]
	TL_init();
 8000182:	f000 f989 	bl	8000498 <TL_init>
}
 8000186:	3708      	adds	r7, #8
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}
 800018c:	2000009c 	.word	0x2000009c
 8000190:	10624dd3 	.word	0x10624dd3
 8000194:	20000098 	.word	0x20000098

08000198 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void(*pFunc)(), unsigned int DELAY, unsigned int PERIOD) {
 8000198:	b580      	push	{r7, lr}
 800019a:	b084      	sub	sp, #16
 800019c:	af00      	add	r7, sp, #0
 800019e:	60f8      	str	r0, [r7, #12]
 80001a0:	60b9      	str	r1, [r7, #8]
 80001a2:	607a      	str	r2, [r7, #4]
	if(TL_size() == SCH_MAX_TASKS) {
 80001a4:	f000 fa90 	bl	80006c8 <TL_size>
 80001a8:	4603      	mov	r3, r0
 80001aa:	2b05      	cmp	r3, #5
 80001ac:	d104      	bne.n	80001b8 <SCH_Add_Task+0x20>
		Error_code = SCH_TOO_MANY_TASK;
 80001ae:	4b0b      	ldr	r3, [pc, #44]	; (80001dc <SCH_Add_Task+0x44>)
 80001b0:	2201      	movs	r2, #1
 80001b2:	701a      	strb	r2, [r3, #0]
		return 0;
 80001b4:	2300      	movs	r3, #0
 80001b6:	e00d      	b.n	80001d4 <SCH_Add_Task+0x3c>
	}
	if(pFunc == NULL) {
 80001b8:	68fb      	ldr	r3, [r7, #12]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d104      	bne.n	80001c8 <SCH_Add_Task+0x30>
		Error_code = SCH_ADD_FAIL;
 80001be:	4b07      	ldr	r3, [pc, #28]	; (80001dc <SCH_Add_Task+0x44>)
 80001c0:	2203      	movs	r2, #3
 80001c2:	701a      	strb	r2, [r3, #0]
		return 0;
 80001c4:	2300      	movs	r3, #0
 80001c6:	e005      	b.n	80001d4 <SCH_Add_Task+0x3c>
	}

	TL_insert(pFunc, DELAY, PERIOD);
 80001c8:	687a      	ldr	r2, [r7, #4]
 80001ca:	68b9      	ldr	r1, [r7, #8]
 80001cc:	68f8      	ldr	r0, [r7, #12]
 80001ce:	f000 f97b 	bl	80004c8 <TL_insert>
	return (uint32_t)pFunc;
 80001d2:	68fb      	ldr	r3, [r7, #12]
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	3710      	adds	r7, #16
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	2000009c 	.word	0x2000009c

080001e0 <SCH_Dispatch_Tasks>:
	if(ret == NULL) {
		Error_code = SCH_DELETE_FAIL;
	}
}

void SCH_Dispatch_Tasks(void) {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
	STask* task =  TL_getFront();
 80001e6:	f000 fa33 	bl	8000650 <TL_getFront>
 80001ea:	6078      	str	r0, [r7, #4]
	if(task && task->RunMe) {
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d020      	beq.n	8000234 <SCH_Dispatch_Tasks+0x54>
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	7b1b      	ldrb	r3, [r3, #12]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d01c      	beq.n	8000234 <SCH_Dispatch_Tasks+0x54>
		(*(task->pTask))();
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4798      	blx	r3
		(task->RunMe)--;
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	7b1b      	ldrb	r3, [r3, #12]
 8000204:	3b01      	subs	r3, #1
 8000206:	b2da      	uxtb	r2, r3
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	731a      	strb	r2, [r3, #12]
		if(task->RunMe == 0) {
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	7b1b      	ldrb	r3, [r3, #12]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d10f      	bne.n	8000234 <SCH_Dispatch_Tasks+0x54>
			struct Node* delNode = TL_removeFront();
 8000214:	f000 f9fa 	bl	800060c <TL_removeFront>
 8000218:	6038      	str	r0, [r7, #0]
			if((delNode->data).Period) {
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	689b      	ldr	r3, [r3, #8]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d006      	beq.n	8000230 <SCH_Dispatch_Tasks+0x50>
				(delNode->data).Delay = (delNode->data).Period;
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	689a      	ldr	r2, [r3, #8]
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	605a      	str	r2, [r3, #4]
				TL_insertNode(delNode);
 800022a:	6838      	ldr	r0, [r7, #0]
 800022c:	f000 f9a2 	bl	8000574 <TL_insertNode>
			}
			SCH_print();
 8000230:	f000 f870 	bl	8000314 <SCH_print>
		}
	}

	//SCH_Go_To_Sleep(); // break program when uart transmits
}
 8000234:	bf00      	nop
 8000236:	3708      	adds	r7, #8
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}

0800023c <SCH_Update>:

void SCH_Update(void) {
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0

	STask* task = TL_getFront();
 8000242:	f000 fa05 	bl	8000650 <TL_getFront>
 8000246:	6078      	str	r0, [r7, #4]
	if(task) {
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d011      	beq.n	8000272 <SCH_Update+0x36>
		if(task->Delay == 0) {
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d106      	bne.n	8000264 <SCH_Update+0x28>
			task->RunMe++;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	7b1b      	ldrb	r3, [r3, #12]
 800025a:	3301      	adds	r3, #1
 800025c:	b2da      	uxtb	r2, r3
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	731a      	strb	r2, [r3, #12]
 8000262:	e006      	b.n	8000272 <SCH_Update+0x36>
		}
		else {
			task->Delay -= INTERRUPT_PERIOD;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	685a      	ldr	r2, [r3, #4]
 8000268:	4b06      	ldr	r3, [pc, #24]	; (8000284 <SCH_Update+0x48>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	1ad2      	subs	r2, r2, r3
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	605a      	str	r2, [r3, #4]
		}
	}

	SCH_Report_Status();
 8000272:	f000 f809 	bl	8000288 <SCH_Report_Status>
	SCH_print();
 8000276:	f000 f84d 	bl	8000314 <SCH_print>
}
 800027a:	bf00      	nop
 800027c:	3708      	adds	r7, #8
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	20000098 	.word	0x20000098

08000288 <SCH_Report_Status>:

void SCH_Report_Status() {
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	report_period--;
 800028c:	4b1a      	ldr	r3, [pc, #104]	; (80002f8 <SCH_Report_Status+0x70>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	3b01      	subs	r3, #1
 8000292:	4a19      	ldr	r2, [pc, #100]	; (80002f8 <SCH_Report_Status+0x70>)
 8000294:	6013      	str	r3, [r2, #0]
	if(report_period > 0) return;
 8000296:	4b18      	ldr	r3, [pc, #96]	; (80002f8 <SCH_Report_Status+0x70>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d129      	bne.n	80002f2 <SCH_Report_Status+0x6a>

	switch(Error_code) {
 800029e:	4b17      	ldr	r3, [pc, #92]	; (80002fc <SCH_Report_Status+0x74>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2b04      	cmp	r3, #4
 80002a4:	d820      	bhi.n	80002e8 <SCH_Report_Status+0x60>
 80002a6:	a201      	add	r2, pc, #4	; (adr r2, 80002ac <SCH_Report_Status+0x24>)
 80002a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ac:	080002c1 	.word	0x080002c1
 80002b0:	080002c9 	.word	0x080002c9
 80002b4:	080002d1 	.word	0x080002d1
 80002b8:	080002d9 	.word	0x080002d9
 80002bc:	080002e1 	.word	0x080002e1
	case SCH_OKAY:
		printf("Scheduler status: OKAY\r\n\r\n");
 80002c0:	480f      	ldr	r0, [pc, #60]	; (8000300 <SCH_Report_Status+0x78>)
 80002c2:	f002 fa9b 	bl	80027fc <puts>
		break;
 80002c6:	e010      	b.n	80002ea <SCH_Report_Status+0x62>
	case SCH_TOO_MANY_TASK:
		printf("Scheduler status: Too many tasks\r\n\r\n");
 80002c8:	480e      	ldr	r0, [pc, #56]	; (8000304 <SCH_Report_Status+0x7c>)
 80002ca:	f002 fa97 	bl	80027fc <puts>
		break;
 80002ce:	e00c      	b.n	80002ea <SCH_Report_Status+0x62>
	case SCH_DELETE_FAIL:
		printf("Scheduler status: fail to delete task\r\n\r\n");
 80002d0:	480d      	ldr	r0, [pc, #52]	; (8000308 <SCH_Report_Status+0x80>)
 80002d2:	f002 fa93 	bl	80027fc <puts>
		break;
 80002d6:	e008      	b.n	80002ea <SCH_Report_Status+0x62>
	case SCH_ADD_FAIL:
		printf("Scheduler status: fail to add task\r\n\r\n");
 80002d8:	480c      	ldr	r0, [pc, #48]	; (800030c <SCH_Report_Status+0x84>)
 80002da:	f002 fa8f 	bl	80027fc <puts>
		break;
 80002de:	e004      	b.n	80002ea <SCH_Report_Status+0x62>
	case SCH_INIT_FAIL:
		printf("Scheduler status: fail to start scheduler\r\n\r\n");
 80002e0:	480b      	ldr	r0, [pc, #44]	; (8000310 <SCH_Report_Status+0x88>)
 80002e2:	f002 fa8b 	bl	80027fc <puts>
		break;
 80002e6:	e000      	b.n	80002ea <SCH_Report_Status+0x62>
	default:
		break;
 80002e8:	bf00      	nop
	}

	report_period = SCH_REPORT_FREQ;
 80002ea:	4b03      	ldr	r3, [pc, #12]	; (80002f8 <SCH_Report_Status+0x70>)
 80002ec:	2264      	movs	r2, #100	; 0x64
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	e000      	b.n	80002f4 <SCH_Report_Status+0x6c>
	if(report_period > 0) return;
 80002f2:	bf00      	nop
}
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	20000000 	.word	0x20000000
 80002fc:	2000009c 	.word	0x2000009c
 8000300:	080036b4 	.word	0x080036b4
 8000304:	080036d0 	.word	0x080036d0
 8000308:	080036f4 	.word	0x080036f4
 800030c:	08003720 	.word	0x08003720
 8000310:	08003748 	.word	0x08003748

08000314 <SCH_print>:
void SCH_Go_To_Sleep(void) {
	HAL_SuspendTick();
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
}

void SCH_print() {
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
	print_task_period--;
 800031a:	4b17      	ldr	r3, [pc, #92]	; (8000378 <SCH_print+0x64>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	3b01      	subs	r3, #1
 8000320:	4a15      	ldr	r2, [pc, #84]	; (8000378 <SCH_print+0x64>)
 8000322:	6013      	str	r3, [r2, #0]
	if(print_task_period > 0) return;
 8000324:	4b14      	ldr	r3, [pc, #80]	; (8000378 <SCH_print+0x64>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d120      	bne.n	800036e <SCH_print+0x5a>

	TL_point_start();
 800032c:	f000 f9a2 	bl	8000674 <TL_point_start>
	STask* task = TL_get();
 8000330:	f000 f9b0 	bl	8000694 <TL_get>
 8000334:	6078      	str	r0, [r7, #4]
	uint32_t accumDelay = 0;
 8000336:	2300      	movs	r3, #0
 8000338:	603b      	str	r3, [r7, #0]
	while(task) {
 800033a:	e00e      	b.n	800035a <SCH_print+0x46>
		accumDelay += task->Delay;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	685b      	ldr	r3, [r3, #4]
 8000340:	683a      	ldr	r2, [r7, #0]
 8000342:	4413      	add	r3, r2
 8000344:	603b      	str	r3, [r7, #0]
		printf("Task id %lu delay remain %lu ms\r\n", task->TaskID, accumDelay);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	691b      	ldr	r3, [r3, #16]
 800034a:	683a      	ldr	r2, [r7, #0]
 800034c:	4619      	mov	r1, r3
 800034e:	480b      	ldr	r0, [pc, #44]	; (800037c <SCH_print+0x68>)
 8000350:	f002 f9ce 	bl	80026f0 <iprintf>
		task = TL_get();
 8000354:	f000 f99e 	bl	8000694 <TL_get>
 8000358:	6078      	str	r0, [r7, #4]
	while(task) {
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d1ed      	bne.n	800033c <SCH_print+0x28>
	}
	printf("\r\n");
 8000360:	4807      	ldr	r0, [pc, #28]	; (8000380 <SCH_print+0x6c>)
 8000362:	f002 fa4b 	bl	80027fc <puts>

	print_task_period = SCH_PRINT_TASK_FREQ;
 8000366:	4b04      	ldr	r3, [pc, #16]	; (8000378 <SCH_print+0x64>)
 8000368:	220a      	movs	r2, #10
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	e000      	b.n	8000370 <SCH_print+0x5c>
	if(print_task_period > 0) return;
 800036e:	bf00      	nop
}
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	20000004 	.word	0x20000004
 800037c:	08003778 	.word	0x08003778
 8000380:	0800379c 	.word	0x0800379c

08000384 <TA_init>:

static uint32_t remain = MAX_NODE;

static struct Node* head = NULL;

void TA_init(void) {
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_NODE; i++) {
 800038a:	2300      	movs	r3, #0
 800038c:	607b      	str	r3, [r7, #4]
 800038e:	e055      	b.n	800043c <TA_init+0xb8>
		slot[i].data.Delay = 0;
 8000390:	492f      	ldr	r1, [pc, #188]	; (8000450 <TA_init+0xcc>)
 8000392:	687a      	ldr	r2, [r7, #4]
 8000394:	4613      	mov	r3, r2
 8000396:	005b      	lsls	r3, r3, #1
 8000398:	4413      	add	r3, r2
 800039a:	00db      	lsls	r3, r3, #3
 800039c:	440b      	add	r3, r1
 800039e:	3304      	adds	r3, #4
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
		slot[i].data.Period = 0;
 80003a4:	492a      	ldr	r1, [pc, #168]	; (8000450 <TA_init+0xcc>)
 80003a6:	687a      	ldr	r2, [r7, #4]
 80003a8:	4613      	mov	r3, r2
 80003aa:	005b      	lsls	r3, r3, #1
 80003ac:	4413      	add	r3, r2
 80003ae:	00db      	lsls	r3, r3, #3
 80003b0:	440b      	add	r3, r1
 80003b2:	3308      	adds	r3, #8
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
		slot[i].data.RunMe = 0;
 80003b8:	4925      	ldr	r1, [pc, #148]	; (8000450 <TA_init+0xcc>)
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	4613      	mov	r3, r2
 80003be:	005b      	lsls	r3, r3, #1
 80003c0:	4413      	add	r3, r2
 80003c2:	00db      	lsls	r3, r3, #3
 80003c4:	440b      	add	r3, r1
 80003c6:	330c      	adds	r3, #12
 80003c8:	2200      	movs	r2, #0
 80003ca:	701a      	strb	r2, [r3, #0]
		slot[i].data.TaskID = 0;
 80003cc:	4920      	ldr	r1, [pc, #128]	; (8000450 <TA_init+0xcc>)
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	4613      	mov	r3, r2
 80003d2:	005b      	lsls	r3, r3, #1
 80003d4:	4413      	add	r3, r2
 80003d6:	00db      	lsls	r3, r3, #3
 80003d8:	440b      	add	r3, r1
 80003da:	3310      	adds	r3, #16
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
		slot[i].data.pTask = NULL;
 80003e0:	491b      	ldr	r1, [pc, #108]	; (8000450 <TA_init+0xcc>)
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	4613      	mov	r3, r2
 80003e6:	005b      	lsls	r3, r3, #1
 80003e8:	4413      	add	r3, r2
 80003ea:	00db      	lsls	r3, r3, #3
 80003ec:	440b      	add	r3, r1
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
		slot[i].next = NULL;
 80003f2:	4917      	ldr	r1, [pc, #92]	; (8000450 <TA_init+0xcc>)
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	4613      	mov	r3, r2
 80003f8:	005b      	lsls	r3, r3, #1
 80003fa:	4413      	add	r3, r2
 80003fc:	00db      	lsls	r3, r3, #3
 80003fe:	440b      	add	r3, r1
 8000400:	3314      	adds	r3, #20
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]

		if(i == 0) {
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d103      	bne.n	8000414 <TA_init+0x90>
			head = &(slot[0]);
 800040c:	4b11      	ldr	r3, [pc, #68]	; (8000454 <TA_init+0xd0>)
 800040e:	4a10      	ldr	r2, [pc, #64]	; (8000450 <TA_init+0xcc>)
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	e010      	b.n	8000436 <TA_init+0xb2>
		}
		else {
			slot[i-1].next = &(slot[i]);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	1e5a      	subs	r2, r3, #1
 8000418:	6879      	ldr	r1, [r7, #4]
 800041a:	460b      	mov	r3, r1
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	440b      	add	r3, r1
 8000420:	00db      	lsls	r3, r3, #3
 8000422:	490b      	ldr	r1, [pc, #44]	; (8000450 <TA_init+0xcc>)
 8000424:	4419      	add	r1, r3
 8000426:	480a      	ldr	r0, [pc, #40]	; (8000450 <TA_init+0xcc>)
 8000428:	4613      	mov	r3, r2
 800042a:	005b      	lsls	r3, r3, #1
 800042c:	4413      	add	r3, r2
 800042e:	00db      	lsls	r3, r3, #3
 8000430:	4403      	add	r3, r0
 8000432:	3314      	adds	r3, #20
 8000434:	6019      	str	r1, [r3, #0]
	for(int i = 0; i < MAX_NODE; i++) {
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	3301      	adds	r3, #1
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	2b05      	cmp	r3, #5
 8000440:	dda6      	ble.n	8000390 <TA_init+0xc>
		}
	}
}
 8000442:	bf00      	nop
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	bc80      	pop	{r7}
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	200000a0 	.word	0x200000a0
 8000454:	20000130 	.word	0x20000130

08000458 <TA_malloc>:

struct Node* TA_malloc(void) {
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
	if(remain == 0) return NULL;
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <TA_malloc+0x38>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d101      	bne.n	800046a <TA_malloc+0x12>
 8000466:	2300      	movs	r3, #0
 8000468:	e00d      	b.n	8000486 <TA_malloc+0x2e>

	struct Node* temp = head;
 800046a:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <TA_malloc+0x3c>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	607b      	str	r3, [r7, #4]
	head = head->next;
 8000470:	4b08      	ldr	r3, [pc, #32]	; (8000494 <TA_malloc+0x3c>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a07      	ldr	r2, [pc, #28]	; (8000494 <TA_malloc+0x3c>)
 8000478:	6013      	str	r3, [r2, #0]

	remain--;
 800047a:	4b05      	ldr	r3, [pc, #20]	; (8000490 <TA_malloc+0x38>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	3b01      	subs	r3, #1
 8000480:	4a03      	ldr	r2, [pc, #12]	; (8000490 <TA_malloc+0x38>)
 8000482:	6013      	str	r3, [r2, #0]
	return temp;
 8000484:	687b      	ldr	r3, [r7, #4]
}
 8000486:	4618      	mov	r0, r3
 8000488:	370c      	adds	r7, #12
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr
 8000490:	20000008 	.word	0x20000008
 8000494:	20000130 	.word	0x20000130

08000498 <TL_init>:
static uint32_t taskCount = 0;

static struct Node* head = NULL;
static struct Node* curr = NULL;

void TL_init(void) {
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	TA_init();
 800049c:	f7ff ff72 	bl	8000384 <TA_init>
	head = TA_malloc(); // create a virtual node
 80004a0:	f7ff ffda 	bl	8000458 <TA_malloc>
 80004a4:	4603      	mov	r3, r0
 80004a6:	4a05      	ldr	r2, [pc, #20]	; (80004bc <TL_init+0x24>)
 80004a8:	6013      	str	r3, [r2, #0]

	taskCount = 0;
 80004aa:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <TL_init+0x28>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
	curr = NULL;
 80004b0:	4b04      	ldr	r3, [pc, #16]	; (80004c4 <TL_init+0x2c>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	20000138 	.word	0x20000138
 80004c0:	20000134 	.word	0x20000134
 80004c4:	2000013c 	.word	0x2000013c

080004c8 <TL_insert>:

void TL_insert(void(*pFunc)(), unsigned int DELAY, unsigned int PERIOD) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
	struct Node* preTemp = head;
 80004d4:	4b25      	ldr	r3, [pc, #148]	; (800056c <TL_insert+0xa4>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	61fb      	str	r3, [r7, #28]
	struct Node* temp = head->next;
 80004da:	4b24      	ldr	r3, [pc, #144]	; (800056c <TL_insert+0xa4>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	695b      	ldr	r3, [r3, #20]
 80004e0:	61bb      	str	r3, [r7, #24]

	uint32_t accumDelay = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	617b      	str	r3, [r7, #20]
	while(temp && (accumDelay + (temp->data).Delay) <= DELAY) {
 80004e6:	e009      	b.n	80004fc <TL_insert+0x34>
		accumDelay += (temp->data).Delay;
 80004e8:	69bb      	ldr	r3, [r7, #24]
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	697a      	ldr	r2, [r7, #20]
 80004ee:	4413      	add	r3, r2
 80004f0:	617b      	str	r3, [r7, #20]

		preTemp = temp;
 80004f2:	69bb      	ldr	r3, [r7, #24]
 80004f4:	61fb      	str	r3, [r7, #28]
		temp = temp->next;
 80004f6:	69bb      	ldr	r3, [r7, #24]
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	61bb      	str	r3, [r7, #24]
	while(temp && (accumDelay + (temp->data).Delay) <= DELAY) {
 80004fc:	69bb      	ldr	r3, [r7, #24]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d006      	beq.n	8000510 <TL_insert+0x48>
 8000502:	69bb      	ldr	r3, [r7, #24]
 8000504:	685a      	ldr	r2, [r3, #4]
 8000506:	697b      	ldr	r3, [r7, #20]
 8000508:	4413      	add	r3, r2
 800050a:	68ba      	ldr	r2, [r7, #8]
 800050c:	429a      	cmp	r2, r3
 800050e:	d2eb      	bcs.n	80004e8 <TL_insert+0x20>
	}

	struct Node* newNode = TA_malloc();
 8000510:	f7ff ffa2 	bl	8000458 <TA_malloc>
 8000514:	6138      	str	r0, [r7, #16]
	preTemp->next = newNode;
 8000516:	69fb      	ldr	r3, [r7, #28]
 8000518:	693a      	ldr	r2, [r7, #16]
 800051a:	615a      	str	r2, [r3, #20]
	newNode->next = temp;
 800051c:	693b      	ldr	r3, [r7, #16]
 800051e:	69ba      	ldr	r2, [r7, #24]
 8000520:	615a      	str	r2, [r3, #20]


	(newNode->data).Period = PERIOD;
 8000522:	693b      	ldr	r3, [r7, #16]
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	609a      	str	r2, [r3, #8]
	(newNode->data).RunMe = 0;
 8000528:	693b      	ldr	r3, [r7, #16]
 800052a:	2200      	movs	r2, #0
 800052c:	731a      	strb	r2, [r3, #12]
	(newNode->data).TaskID = (uint32_t)pFunc;
 800052e:	68fa      	ldr	r2, [r7, #12]
 8000530:	693b      	ldr	r3, [r7, #16]
 8000532:	611a      	str	r2, [r3, #16]
	(newNode->data).pTask = pFunc;
 8000534:	693b      	ldr	r3, [r7, #16]
 8000536:	68fa      	ldr	r2, [r7, #12]
 8000538:	601a      	str	r2, [r3, #0]
	(newNode->data).Delay = DELAY - accumDelay;
 800053a:	68ba      	ldr	r2, [r7, #8]
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	1ad2      	subs	r2, r2, r3
 8000540:	693b      	ldr	r3, [r7, #16]
 8000542:	605a      	str	r2, [r3, #4]

	if(temp) {
 8000544:	69bb      	ldr	r3, [r7, #24]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d006      	beq.n	8000558 <TL_insert+0x90>
		(temp->data).Delay -= (newNode->data).Delay;
 800054a:	69bb      	ldr	r3, [r7, #24]
 800054c:	685a      	ldr	r2, [r3, #4]
 800054e:	693b      	ldr	r3, [r7, #16]
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	1ad2      	subs	r2, r2, r3
 8000554:	69bb      	ldr	r3, [r7, #24]
 8000556:	605a      	str	r2, [r3, #4]
	}

	taskCount++;
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <TL_insert+0xa8>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	4a04      	ldr	r2, [pc, #16]	; (8000570 <TL_insert+0xa8>)
 8000560:	6013      	str	r3, [r2, #0]
}
 8000562:	bf00      	nop
 8000564:	3720      	adds	r7, #32
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000138 	.word	0x20000138
 8000570:	20000134 	.word	0x20000134

08000574 <TL_insertNode>:

void TL_insertNode(struct Node* node) {
 8000574:	b480      	push	{r7}
 8000576:	b087      	sub	sp, #28
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	if(node == NULL) return;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d03a      	beq.n	80005f8 <TL_insertNode+0x84>

	struct Node* preTemp = head;
 8000582:	4b20      	ldr	r3, [pc, #128]	; (8000604 <TL_insertNode+0x90>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	617b      	str	r3, [r7, #20]
	struct Node* temp = head->next;
 8000588:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <TL_insertNode+0x90>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	613b      	str	r3, [r7, #16]

	uint32_t accumDelay = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	60fb      	str	r3, [r7, #12]
	while(temp && (accumDelay + (temp->data).Delay) <= (node->data).Delay) {
 8000594:	e009      	b.n	80005aa <TL_insertNode+0x36>
		accumDelay += (temp->data).Delay;
 8000596:	693b      	ldr	r3, [r7, #16]
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	4413      	add	r3, r2
 800059e:	60fb      	str	r3, [r7, #12]

		preTemp = temp;
 80005a0:	693b      	ldr	r3, [r7, #16]
 80005a2:	617b      	str	r3, [r7, #20]
		temp = temp->next;
 80005a4:	693b      	ldr	r3, [r7, #16]
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	613b      	str	r3, [r7, #16]
	while(temp && (accumDelay + (temp->data).Delay) <= (node->data).Delay) {
 80005aa:	693b      	ldr	r3, [r7, #16]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d007      	beq.n	80005c0 <TL_insertNode+0x4c>
 80005b0:	693b      	ldr	r3, [r7, #16]
 80005b2:	685a      	ldr	r2, [r3, #4]
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	441a      	add	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d9ea      	bls.n	8000596 <TL_insertNode+0x22>
	}

	preTemp->next = node;
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	615a      	str	r2, [r3, #20]
	node->next = temp;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	693a      	ldr	r2, [r7, #16]
 80005ca:	615a      	str	r2, [r3, #20]

	(node->data).Delay -= accumDelay;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	685a      	ldr	r2, [r3, #4]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	1ad2      	subs	r2, r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	605a      	str	r2, [r3, #4]
	if(temp) {
 80005d8:	693b      	ldr	r3, [r7, #16]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d006      	beq.n	80005ec <TL_insertNode+0x78>
		(temp->data).Delay -= (node->data).Delay;
 80005de:	693b      	ldr	r3, [r7, #16]
 80005e0:	685a      	ldr	r2, [r3, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	1ad2      	subs	r2, r2, r3
 80005e8:	693b      	ldr	r3, [r7, #16]
 80005ea:	605a      	str	r2, [r3, #4]
	}

	taskCount++;
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <TL_insertNode+0x94>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	3301      	adds	r3, #1
 80005f2:	4a05      	ldr	r2, [pc, #20]	; (8000608 <TL_insertNode+0x94>)
 80005f4:	6013      	str	r3, [r2, #0]
 80005f6:	e000      	b.n	80005fa <TL_insertNode+0x86>
	if(node == NULL) return;
 80005f8:	bf00      	nop
}
 80005fa:	371c      	adds	r7, #28
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	20000138 	.word	0x20000138
 8000608:	20000134 	.word	0x20000134

0800060c <TL_removeFront>:
	taskCount--;

	TA_free(temp);
	return NULL;
}
struct Node* TL_removeFront(void) { // just remove node from current list in order to add it in again -> no need to free()
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
	if(taskCount == 0) return NULL;
 8000612:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <TL_removeFront+0x3c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d101      	bne.n	800061e <TL_removeFront+0x12>
 800061a:	2300      	movs	r3, #0
 800061c:	e00e      	b.n	800063c <TL_removeFront+0x30>

	struct Node* delNode = head->next;
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <TL_removeFront+0x40>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	695b      	ldr	r3, [r3, #20]
 8000624:	607b      	str	r3, [r7, #4]
	head->next = delNode->next;
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <TL_removeFront+0x40>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	6952      	ldr	r2, [r2, #20]
 800062e:	615a      	str	r2, [r3, #20]

	taskCount--;
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <TL_removeFront+0x3c>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	3b01      	subs	r3, #1
 8000636:	4a04      	ldr	r2, [pc, #16]	; (8000648 <TL_removeFront+0x3c>)
 8000638:	6013      	str	r3, [r2, #0]
	return delNode;
 800063a:	687b      	ldr	r3, [r7, #4]
}
 800063c:	4618      	mov	r0, r3
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20000134 	.word	0x20000134
 800064c:	20000138 	.word	0x20000138

08000650 <TL_getFront>:

STask* TL_getFront() {
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
	if(head)
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <TL_getFront+0x20>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d003      	beq.n	8000664 <TL_getFront+0x14>
		return &(head->next->data);
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <TL_getFront+0x20>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	e000      	b.n	8000666 <TL_getFront+0x16>
	return NULL;
 8000664:	2300      	movs	r3, #0
}
 8000666:	4618      	mov	r0, r3
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000138 	.word	0x20000138

08000674 <TL_point_start>:


void TL_point_start() {
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
	curr = head->next;
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <TL_point_start+0x18>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	4a04      	ldr	r2, [pc, #16]	; (8000690 <TL_point_start+0x1c>)
 8000680:	6013      	str	r3, [r2, #0]
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000138 	.word	0x20000138
 8000690:	2000013c 	.word	0x2000013c

08000694 <TL_get>:
STask* TL_get() {
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
	if(curr) {
 800069a:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <TL_get+0x30>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d009      	beq.n	80006b6 <TL_get+0x22>
		STask* task = &(curr->data);
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <TL_get+0x30>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	607b      	str	r3, [r7, #4]
		curr = curr->next;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <TL_get+0x30>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	4a05      	ldr	r2, [pc, #20]	; (80006c4 <TL_get+0x30>)
 80006b0:	6013      	str	r3, [r2, #0]
		return task;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	e000      	b.n	80006b8 <TL_get+0x24>
	}
	return NULL;
 80006b6:	2300      	movs	r3, #0
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	2000013c 	.word	0x2000013c

080006c8 <TL_size>:
uint32_t TL_size() {
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
	return taskCount;
 80006cc:	4b02      	ldr	r3, [pc, #8]	; (80006d8 <TL_size+0x10>)
 80006ce:	681b      	ldr	r3, [r3, #0]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr
 80006d8:	20000134 	.word	0x20000134

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e0:	f000 fb02 	bl	8000ce8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e4:	f000 f832 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e8:	f000 f8e2 	bl	80008b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80006ec:	f000 f86a 	bl	80007c4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80006f0:	f000 f8b4 	bl	800085c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  init_uart_printf(&huart1);
 80006f4:	480f      	ldr	r0, [pc, #60]	; (8000734 <main+0x58>)
 80006f6:	f000 faaf 	bl	8000c58 <init_uart_printf>
  HAL_TIM_Base_Start_IT(&htim2);
 80006fa:	480f      	ldr	r0, [pc, #60]	; (8000738 <main+0x5c>)
 80006fc:	f001 fa7a 	bl	8001bf4 <HAL_TIM_Base_Start_IT>
  SCH_Init(&htim2);
 8000700:	480d      	ldr	r0, [pc, #52]	; (8000738 <main+0x5c>)
 8000702:	f7ff fd23 	bl	800014c <SCH_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  id1 = SCH_Add_Task(toggleLed, 500, 250);
 8000706:	22fa      	movs	r2, #250	; 0xfa
 8000708:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800070c:	480b      	ldr	r0, [pc, #44]	; (800073c <main+0x60>)
 800070e:	f7ff fd43 	bl	8000198 <SCH_Add_Task>
 8000712:	4603      	mov	r3, r0
 8000714:	4a0a      	ldr	r2, [pc, #40]	; (8000740 <main+0x64>)
 8000716:	6013      	str	r3, [r2, #0]
  id2 = SCH_Add_Task(toggleLed2, 510, 500);
 8000718:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800071c:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8000720:	4808      	ldr	r0, [pc, #32]	; (8000744 <main+0x68>)
 8000722:	f7ff fd39 	bl	8000198 <SCH_Add_Task>
 8000726:	4603      	mov	r3, r0
 8000728:	4a07      	ldr	r2, [pc, #28]	; (8000748 <main+0x6c>)
 800072a:	6013      	str	r3, [r2, #0]

  while (1)
  {

	  SCH_Dispatch_Tasks();
 800072c:	f7ff fd58 	bl	80001e0 <SCH_Dispatch_Tasks>
 8000730:	e7fc      	b.n	800072c <main+0x50>
 8000732:	bf00      	nop
 8000734:	2000014c 	.word	0x2000014c
 8000738:	20000198 	.word	0x20000198
 800073c:	08000915 	.word	0x08000915
 8000740:	20000194 	.word	0x20000194
 8000744:	08000929 	.word	0x08000929
 8000748:	20000190 	.word	0x20000190

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b090      	sub	sp, #64	; 0x40
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 0318 	add.w	r3, r7, #24
 8000756:	2228      	movs	r2, #40	; 0x28
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f001 ffc0 	bl	80026e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800076e:	2302      	movs	r3, #2
 8000770:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000772:	2301      	movs	r3, #1
 8000774:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000776:	2310      	movs	r3, #16
 8000778:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800077a:	2300      	movs	r3, #0
 800077c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077e:	f107 0318 	add.w	r3, r7, #24
 8000782:	4618      	mov	r0, r3
 8000784:	f000 fdcc 	bl	8001320 <HAL_RCC_OscConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800078e:	f000 f8e4 	bl	800095a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000792:	230f      	movs	r3, #15
 8000794:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 f838 	bl	8001820 <HAL_RCC_ClockConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007b6:	f000 f8d0 	bl	800095a <Error_Handler>
  }
}
 80007ba:	bf00      	nop
 80007bc:	3740      	adds	r7, #64	; 0x40
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ca:	f107 0308 	add.w	r3, r7, #8
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d8:	463b      	mov	r3, r7
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007e0:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <MX_TIM2_Init+0x94>)
 80007e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <MX_TIM2_Init+0x94>)
 80007ea:	f240 321f 	movw	r2, #799	; 0x31f
 80007ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f0:	4b19      	ldr	r3, [pc, #100]	; (8000858 <MX_TIM2_Init+0x94>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_TIM2_Init+0x94>)
 80007f8:	2263      	movs	r2, #99	; 0x63
 80007fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fc:	4b16      	ldr	r3, [pc, #88]	; (8000858 <MX_TIM2_Init+0x94>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_TIM2_Init+0x94>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000808:	4813      	ldr	r0, [pc, #76]	; (8000858 <MX_TIM2_Init+0x94>)
 800080a:	f001 f9a3 	bl	8001b54 <HAL_TIM_Base_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000814:	f000 f8a1 	bl	800095a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	4619      	mov	r1, r3
 8000824:	480c      	ldr	r0, [pc, #48]	; (8000858 <MX_TIM2_Init+0x94>)
 8000826:	f001 fb39 	bl	8001e9c <HAL_TIM_ConfigClockSource>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000830:	f000 f893 	bl	800095a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000834:	2300      	movs	r3, #0
 8000836:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000838:	2300      	movs	r3, #0
 800083a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800083c:	463b      	mov	r3, r7
 800083e:	4619      	mov	r1, r3
 8000840:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_TIM2_Init+0x94>)
 8000842:	f001 fd01 	bl	8002248 <HAL_TIMEx_MasterConfigSynchronization>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800084c:	f000 f885 	bl	800095a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	3718      	adds	r7, #24
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000198 	.word	0x20000198

0800085c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000860:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_USART1_UART_Init+0x4c>)
 8000862:	4a12      	ldr	r2, [pc, #72]	; (80008ac <MX_USART1_UART_Init+0x50>)
 8000864:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <MX_USART1_UART_Init+0x4c>)
 8000868:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800086c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_USART1_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_USART1_UART_Init+0x4c>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <MX_USART1_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_USART1_UART_Init+0x4c>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <MX_USART1_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_USART1_UART_Init+0x4c>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_USART1_UART_Init+0x4c>)
 8000894:	f001 fd42 	bl	800231c <HAL_UART_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800089e:	f000 f85c 	bl	800095a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	2000014c 	.word	0x2000014c
 80008ac:	40013800 	.word	0x40013800

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 0308 	add.w	r3, r7, #8
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_GPIO_Init+0x5c>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a10      	ldr	r2, [pc, #64]	; (800090c <MX_GPIO_Init+0x5c>)
 80008ca:	f043 0304 	orr.w	r3, r3, #4
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_GPIO_Init+0x5c>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f003 0304 	and.w	r3, r3, #4
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG2_Pin|DEBUG_Pin|DEBUG3_Pin, GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	211c      	movs	r1, #28
 80008e0:	480b      	ldr	r0, [pc, #44]	; (8000910 <MX_GPIO_Init+0x60>)
 80008e2:	f000 fceb 	bl	80012bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG2_Pin DEBUG_Pin DEBUG3_Pin */
  GPIO_InitStruct.Pin = DEBUG2_Pin|DEBUG_Pin|DEBUG3_Pin;
 80008e6:	231c      	movs	r3, #28
 80008e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2302      	movs	r3, #2
 80008f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	4619      	mov	r1, r3
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <MX_GPIO_Init+0x60>)
 80008fe:	f000 fb63 	bl	8000fc8 <HAL_GPIO_Init>

}
 8000902:	bf00      	nop
 8000904:	3718      	adds	r7, #24
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40021000 	.word	0x40021000
 8000910:	40010800 	.word	0x40010800

08000914 <toggleLed>:

/* USER CODE BEGIN 4 */
void toggleLed() {
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(DEBUG2_GPIO_Port, DEBUG2_Pin);
 8000918:	2104      	movs	r1, #4
 800091a:	4802      	ldr	r0, [pc, #8]	; (8000924 <toggleLed+0x10>)
 800091c:	f000 fce6 	bl	80012ec <HAL_GPIO_TogglePin>
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40010800 	.word	0x40010800

08000928 <toggleLed2>:
void toggleLed2() {
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(DEBUG_GPIO_Port, DEBUG_Pin);
 800092c:	2108      	movs	r1, #8
 800092e:	4802      	ldr	r0, [pc, #8]	; (8000938 <toggleLed2+0x10>)
 8000930:	f000 fcdc 	bl	80012ec <HAL_GPIO_TogglePin>
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40010800 	.word	0x40010800

0800093c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	//HAL_ResumeTick(); // resume systick from sleep
//	static uint32_t count = 1000;
	if(htim->Instance == TIM2) {
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800094c:	d101      	bne.n	8000952 <HAL_TIM_PeriodElapsedCallback+0x16>
		SCH_Update();
 800094e:	f7ff fc75 	bl	800023c <SCH_Update>
//				count = 1000;
//				SCH_Delete_Task(id1);
//			}
//		}
	}
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095e:	b672      	cpsid	i
}
 8000960:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000962:	e7fe      	b.n	8000962 <Error_Handler+0x8>

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <HAL_MspInit+0x5c>)
 800096c:	699b      	ldr	r3, [r3, #24]
 800096e:	4a14      	ldr	r2, [pc, #80]	; (80009c0 <HAL_MspInit+0x5c>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6193      	str	r3, [r2, #24]
 8000976:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <HAL_MspInit+0x5c>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <HAL_MspInit+0x5c>)
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <HAL_MspInit+0x5c>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098c:	61d3      	str	r3, [r2, #28]
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <HAL_MspInit+0x5c>)
 8000990:	69db      	ldr	r3, [r3, #28]
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <HAL_MspInit+0x60>)
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <HAL_MspInit+0x60>)
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b6:	bf00      	nop
 80009b8:	3714      	adds	r7, #20
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40010000 	.word	0x40010000

080009c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009d8:	d113      	bne.n	8000a02 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <HAL_TIM_Base_MspInit+0x44>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	4a0b      	ldr	r2, [pc, #44]	; (8000a0c <HAL_TIM_Base_MspInit+0x44>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	61d3      	str	r3, [r2, #28]
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <HAL_TIM_Base_MspInit+0x44>)
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	201c      	movs	r0, #28
 80009f8:	f000 faaf 	bl	8000f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009fc:	201c      	movs	r0, #28
 80009fe:	f000 fac8 	bl	8000f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40021000 	.word	0x40021000

08000a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0310 	add.w	r3, r7, #16
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a1c      	ldr	r2, [pc, #112]	; (8000a9c <HAL_UART_MspInit+0x8c>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d131      	bne.n	8000a94 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <HAL_UART_MspInit+0x90>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a1a      	ldr	r2, [pc, #104]	; (8000aa0 <HAL_UART_MspInit+0x90>)
 8000a36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <HAL_UART_MspInit+0x90>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <HAL_UART_MspInit+0x90>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4a14      	ldr	r2, [pc, #80]	; (8000aa0 <HAL_UART_MspInit+0x90>)
 8000a4e:	f043 0304 	orr.w	r3, r3, #4
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_UART_MspInit+0x90>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f003 0304 	and.w	r3, r3, #4
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 0310 	add.w	r3, r7, #16
 8000a72:	4619      	mov	r1, r3
 8000a74:	480b      	ldr	r0, [pc, #44]	; (8000aa4 <HAL_UART_MspInit+0x94>)
 8000a76:	f000 faa7 	bl	8000fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <HAL_UART_MspInit+0x94>)
 8000a90:	f000 fa9a 	bl	8000fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a94:	bf00      	nop
 8000a96:	3720      	adds	r7, #32
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40013800 	.word	0x40013800
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40010800 	.word	0x40010800

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <NMI_Handler+0x4>

08000aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <MemManage_Handler+0x4>

08000aba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <BusFault_Handler+0x4>

08000ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <UsageFault_Handler+0x4>

08000ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr

08000ad2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr

08000ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr

08000aea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aee:	f000 f941 	bl	8000d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000afc:	4802      	ldr	r0, [pc, #8]	; (8000b08 <TIM2_IRQHandler+0x10>)
 8000afe:	f001 f8c5 	bl	8001c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000198 	.word	0x20000198

08000b0c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	e00a      	b.n	8000b34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b1e:	f3af 8000 	nop.w
 8000b22:	4601      	mov	r1, r0
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	1c5a      	adds	r2, r3, #1
 8000b28:	60ba      	str	r2, [r7, #8]
 8000b2a:	b2ca      	uxtb	r2, r1
 8000b2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	3301      	adds	r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	697a      	ldr	r2, [r7, #20]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	dbf0      	blt.n	8000b1e <_read+0x12>
	}

return len;
 8000b3c:	687b      	ldr	r3, [r7, #4]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3718      	adds	r7, #24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b086      	sub	sp, #24
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	60f8      	str	r0, [r7, #12]
 8000b4e:	60b9      	str	r1, [r7, #8]
 8000b50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
 8000b56:	e009      	b.n	8000b6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	1c5a      	adds	r2, r3, #1
 8000b5c:	60ba      	str	r2, [r7, #8]
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f000 f887 	bl	8000c74 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	697a      	ldr	r2, [r7, #20]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	dbf1      	blt.n	8000b58 <_write+0x12>
	}
	return len;
 8000b74:	687b      	ldr	r3, [r7, #4]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <_close>:

int _close(int file)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
	return -1;
 8000b86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ba4:	605a      	str	r2, [r3, #4]
	return 0;
 8000ba6:	2300      	movs	r3, #0
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr

08000bb2 <_isatty>:

int _isatty(int file)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b083      	sub	sp, #12
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
	return 1;
 8000bba:	2301      	movs	r3, #1
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr

08000bc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b085      	sub	sp, #20
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	60f8      	str	r0, [r7, #12]
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	607a      	str	r2, [r7, #4]
	return 0;
 8000bd2:	2300      	movs	r3, #0
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
	...

08000be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be8:	4a14      	ldr	r2, [pc, #80]	; (8000c3c <_sbrk+0x5c>)
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <_sbrk+0x60>)
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <_sbrk+0x64>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <_sbrk+0x64>)
 8000bfe:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <_sbrk+0x68>)
 8000c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <_sbrk+0x64>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d207      	bcs.n	8000c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c10:	f001 fd3c 	bl	800268c <__errno>
 8000c14:	4603      	mov	r3, r0
 8000c16:	220c      	movs	r2, #12
 8000c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	e009      	b.n	8000c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <_sbrk+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c26:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <_sbrk+0x64>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <_sbrk+0x64>)
 8000c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c32:	68fb      	ldr	r3, [r7, #12]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20002800 	.word	0x20002800
 8000c40:	00000400 	.word	0x00000400
 8000c44:	20000140 	.word	0x20000140
 8000c48:	200001f8 	.word	0x200001f8

08000c4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr

08000c58 <init_uart_printf>:

#include "uart_printf.h"

UART_HandleTypeDef *huart;

void init_uart_printf(UART_HandleTypeDef *uart) {
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	huart = uart;
 8000c60:	4a03      	ldr	r2, [pc, #12]	; (8000c70 <init_uart_printf+0x18>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6013      	str	r3, [r2, #0]
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	200001e0 	.word	0x200001e0

08000c74 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART2 and Loop until the end of transmission */
 HAL_UART_Transmit(huart, (uint8_t *)&ch, 1, 0xFFFF);
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <__io_putchar+0x24>)
 8000c7e:	6818      	ldr	r0, [r3, #0]
 8000c80:	1d39      	adds	r1, r7, #4
 8000c82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c86:	2201      	movs	r2, #1
 8000c88:	f001 fb95 	bl	80023b6 <HAL_UART_Transmit>

return ch;
 8000c8c:	687b      	ldr	r3, [r7, #4]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200001e0 	.word	0x200001e0

08000c9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c9c:	f7ff ffd6 	bl	8000c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca0:	480b      	ldr	r0, [pc, #44]	; (8000cd0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ca2:	490c      	ldr	r1, [pc, #48]	; (8000cd4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ca4:	4a0c      	ldr	r2, [pc, #48]	; (8000cd8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca8:	e002      	b.n	8000cb0 <LoopCopyDataInit>

08000caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cae:	3304      	adds	r3, #4

08000cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb4:	d3f9      	bcc.n	8000caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb6:	4a09      	ldr	r2, [pc, #36]	; (8000cdc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cb8:	4c09      	ldr	r4, [pc, #36]	; (8000ce0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cbc:	e001      	b.n	8000cc2 <LoopFillZerobss>

08000cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc0:	3204      	adds	r2, #4

08000cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc4:	d3fb      	bcc.n	8000cbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cc6:	f001 fce7 	bl	8002698 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cca:	f7ff fd07 	bl	80006dc <main>
  bx lr
 8000cce:	4770      	bx	lr
  ldr r0, =_sdata
 8000cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000cd8:	08003868 	.word	0x08003868
  ldr r2, =_sbss
 8000cdc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000ce0:	200001f8 	.word	0x200001f8

08000ce4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ce4:	e7fe      	b.n	8000ce4 <ADC1_2_IRQHandler>
	...

08000ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <HAL_Init+0x28>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a07      	ldr	r2, [pc, #28]	; (8000d10 <HAL_Init+0x28>)
 8000cf2:	f043 0310 	orr.w	r3, r3, #16
 8000cf6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	f000 f923 	bl	8000f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfe:	200f      	movs	r0, #15
 8000d00:	f000 f808 	bl	8000d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d04:	f7ff fe2e 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40022000 	.word	0x40022000

08000d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_InitTick+0x54>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_InitTick+0x58>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4619      	mov	r1, r3
 8000d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 f93b 	bl	8000fae <HAL_SYSTICK_Config>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00e      	b.n	8000d60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b0f      	cmp	r3, #15
 8000d46:	d80a      	bhi.n	8000d5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f000 f903 	bl	8000f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d54:	4a06      	ldr	r2, [pc, #24]	; (8000d70 <HAL_InitTick+0x5c>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e000      	b.n	8000d60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	2000000c 	.word	0x2000000c
 8000d6c:	20000014 	.word	0x20000014
 8000d70:	20000010 	.word	0x20000010

08000d74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <HAL_IncTick+0x1c>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <HAL_IncTick+0x20>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4413      	add	r3, r2
 8000d84:	4a03      	ldr	r2, [pc, #12]	; (8000d94 <HAL_IncTick+0x20>)
 8000d86:	6013      	str	r3, [r2, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	20000014 	.word	0x20000014
 8000d94:	200001e4 	.word	0x200001e4

08000d98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d9c:	4b02      	ldr	r3, [pc, #8]	; (8000da8 <HAL_GetTick+0x10>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr
 8000da8:	200001e4 	.word	0x200001e4

08000dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dde:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	60d3      	str	r3, [r2, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <__NVIC_GetPriorityGrouping+0x18>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	f003 0307 	and.w	r3, r3, #7
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	db0b      	blt.n	8000e3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	f003 021f 	and.w	r2, r3, #31
 8000e28:	4906      	ldr	r1, [pc, #24]	; (8000e44 <__NVIC_EnableIRQ+0x34>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	095b      	lsrs	r3, r3, #5
 8000e30:	2001      	movs	r0, #1
 8000e32:	fa00 f202 	lsl.w	r2, r0, r2
 8000e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	e000e100 	.word	0xe000e100

08000e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	6039      	str	r1, [r7, #0]
 8000e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	db0a      	blt.n	8000e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	490c      	ldr	r1, [pc, #48]	; (8000e94 <__NVIC_SetPriority+0x4c>)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	0112      	lsls	r2, r2, #4
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	440b      	add	r3, r1
 8000e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e70:	e00a      	b.n	8000e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4908      	ldr	r1, [pc, #32]	; (8000e98 <__NVIC_SetPriority+0x50>)
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	3b04      	subs	r3, #4
 8000e80:	0112      	lsls	r2, r2, #4
 8000e82:	b2d2      	uxtb	r2, r2
 8000e84:	440b      	add	r3, r1
 8000e86:	761a      	strb	r2, [r3, #24]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000e100 	.word	0xe000e100
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b089      	sub	sp, #36	; 0x24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f1c3 0307 	rsb	r3, r3, #7
 8000eb6:	2b04      	cmp	r3, #4
 8000eb8:	bf28      	it	cs
 8000eba:	2304      	movcs	r3, #4
 8000ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	2b06      	cmp	r3, #6
 8000ec4:	d902      	bls.n	8000ecc <NVIC_EncodePriority+0x30>
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3b03      	subs	r3, #3
 8000eca:	e000      	b.n	8000ece <NVIC_EncodePriority+0x32>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43da      	mvns	r2, r3
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	401a      	ands	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	fa01 f303 	lsl.w	r3, r1, r3
 8000eee:	43d9      	mvns	r1, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	4313      	orrs	r3, r2
         );
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3724      	adds	r7, #36	; 0x24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f10:	d301      	bcc.n	8000f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00f      	b.n	8000f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f16:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <SysTick_Config+0x40>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1e:	210f      	movs	r1, #15
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	f7ff ff90 	bl	8000e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <SysTick_Config+0x40>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <SysTick_Config+0x40>)
 8000f30:	2207      	movs	r2, #7
 8000f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	e000e010 	.word	0xe000e010

08000f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ff2d 	bl	8000dac <__NVIC_SetPriorityGrouping>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f6c:	f7ff ff42 	bl	8000df4 <__NVIC_GetPriorityGrouping>
 8000f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	68b9      	ldr	r1, [r7, #8]
 8000f76:	6978      	ldr	r0, [r7, #20]
 8000f78:	f7ff ff90 	bl	8000e9c <NVIC_EncodePriority>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff5f 	bl	8000e48 <__NVIC_SetPriority>
}
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	4603      	mov	r3, r0
 8000f9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff35 	bl	8000e10 <__NVIC_EnableIRQ>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ffa2 	bl	8000f00 <SysTick_Config>
 8000fbc:	4603      	mov	r3, r0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b08b      	sub	sp, #44	; 0x2c
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fda:	e148      	b.n	800126e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	69fa      	ldr	r2, [r7, #28]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	f040 8137 	bne.w	8001268 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	4aa3      	ldr	r2, [pc, #652]	; (800128c <HAL_GPIO_Init+0x2c4>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d05e      	beq.n	80010c2 <HAL_GPIO_Init+0xfa>
 8001004:	4aa1      	ldr	r2, [pc, #644]	; (800128c <HAL_GPIO_Init+0x2c4>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d875      	bhi.n	80010f6 <HAL_GPIO_Init+0x12e>
 800100a:	4aa1      	ldr	r2, [pc, #644]	; (8001290 <HAL_GPIO_Init+0x2c8>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d058      	beq.n	80010c2 <HAL_GPIO_Init+0xfa>
 8001010:	4a9f      	ldr	r2, [pc, #636]	; (8001290 <HAL_GPIO_Init+0x2c8>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d86f      	bhi.n	80010f6 <HAL_GPIO_Init+0x12e>
 8001016:	4a9f      	ldr	r2, [pc, #636]	; (8001294 <HAL_GPIO_Init+0x2cc>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d052      	beq.n	80010c2 <HAL_GPIO_Init+0xfa>
 800101c:	4a9d      	ldr	r2, [pc, #628]	; (8001294 <HAL_GPIO_Init+0x2cc>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d869      	bhi.n	80010f6 <HAL_GPIO_Init+0x12e>
 8001022:	4a9d      	ldr	r2, [pc, #628]	; (8001298 <HAL_GPIO_Init+0x2d0>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d04c      	beq.n	80010c2 <HAL_GPIO_Init+0xfa>
 8001028:	4a9b      	ldr	r2, [pc, #620]	; (8001298 <HAL_GPIO_Init+0x2d0>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d863      	bhi.n	80010f6 <HAL_GPIO_Init+0x12e>
 800102e:	4a9b      	ldr	r2, [pc, #620]	; (800129c <HAL_GPIO_Init+0x2d4>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d046      	beq.n	80010c2 <HAL_GPIO_Init+0xfa>
 8001034:	4a99      	ldr	r2, [pc, #612]	; (800129c <HAL_GPIO_Init+0x2d4>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d85d      	bhi.n	80010f6 <HAL_GPIO_Init+0x12e>
 800103a:	2b12      	cmp	r3, #18
 800103c:	d82a      	bhi.n	8001094 <HAL_GPIO_Init+0xcc>
 800103e:	2b12      	cmp	r3, #18
 8001040:	d859      	bhi.n	80010f6 <HAL_GPIO_Init+0x12e>
 8001042:	a201      	add	r2, pc, #4	; (adr r2, 8001048 <HAL_GPIO_Init+0x80>)
 8001044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001048:	080010c3 	.word	0x080010c3
 800104c:	0800109d 	.word	0x0800109d
 8001050:	080010af 	.word	0x080010af
 8001054:	080010f1 	.word	0x080010f1
 8001058:	080010f7 	.word	0x080010f7
 800105c:	080010f7 	.word	0x080010f7
 8001060:	080010f7 	.word	0x080010f7
 8001064:	080010f7 	.word	0x080010f7
 8001068:	080010f7 	.word	0x080010f7
 800106c:	080010f7 	.word	0x080010f7
 8001070:	080010f7 	.word	0x080010f7
 8001074:	080010f7 	.word	0x080010f7
 8001078:	080010f7 	.word	0x080010f7
 800107c:	080010f7 	.word	0x080010f7
 8001080:	080010f7 	.word	0x080010f7
 8001084:	080010f7 	.word	0x080010f7
 8001088:	080010f7 	.word	0x080010f7
 800108c:	080010a5 	.word	0x080010a5
 8001090:	080010b9 	.word	0x080010b9
 8001094:	4a82      	ldr	r2, [pc, #520]	; (80012a0 <HAL_GPIO_Init+0x2d8>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d013      	beq.n	80010c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800109a:	e02c      	b.n	80010f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	623b      	str	r3, [r7, #32]
          break;
 80010a2:	e029      	b.n	80010f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	3304      	adds	r3, #4
 80010aa:	623b      	str	r3, [r7, #32]
          break;
 80010ac:	e024      	b.n	80010f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	3308      	adds	r3, #8
 80010b4:	623b      	str	r3, [r7, #32]
          break;
 80010b6:	e01f      	b.n	80010f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	330c      	adds	r3, #12
 80010be:	623b      	str	r3, [r7, #32]
          break;
 80010c0:	e01a      	b.n	80010f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d102      	bne.n	80010d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010ca:	2304      	movs	r3, #4
 80010cc:	623b      	str	r3, [r7, #32]
          break;
 80010ce:	e013      	b.n	80010f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d105      	bne.n	80010e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010d8:	2308      	movs	r3, #8
 80010da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69fa      	ldr	r2, [r7, #28]
 80010e0:	611a      	str	r2, [r3, #16]
          break;
 80010e2:	e009      	b.n	80010f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010e4:	2308      	movs	r3, #8
 80010e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	69fa      	ldr	r2, [r7, #28]
 80010ec:	615a      	str	r2, [r3, #20]
          break;
 80010ee:	e003      	b.n	80010f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
          break;
 80010f4:	e000      	b.n	80010f8 <HAL_GPIO_Init+0x130>
          break;
 80010f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	2bff      	cmp	r3, #255	; 0xff
 80010fc:	d801      	bhi.n	8001102 <HAL_GPIO_Init+0x13a>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	e001      	b.n	8001106 <HAL_GPIO_Init+0x13e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3304      	adds	r3, #4
 8001106:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	2bff      	cmp	r3, #255	; 0xff
 800110c:	d802      	bhi.n	8001114 <HAL_GPIO_Init+0x14c>
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	e002      	b.n	800111a <HAL_GPIO_Init+0x152>
 8001114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001116:	3b08      	subs	r3, #8
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	210f      	movs	r1, #15
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	fa01 f303 	lsl.w	r3, r1, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	401a      	ands	r2, r3
 800112c:	6a39      	ldr	r1, [r7, #32]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	fa01 f303 	lsl.w	r3, r1, r3
 8001134:	431a      	orrs	r2, r3
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 8090 	beq.w	8001268 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001148:	4b56      	ldr	r3, [pc, #344]	; (80012a4 <HAL_GPIO_Init+0x2dc>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a55      	ldr	r2, [pc, #340]	; (80012a4 <HAL_GPIO_Init+0x2dc>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	6193      	str	r3, [r2, #24]
 8001154:	4b53      	ldr	r3, [pc, #332]	; (80012a4 <HAL_GPIO_Init+0x2dc>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001160:	4a51      	ldr	r2, [pc, #324]	; (80012a8 <HAL_GPIO_Init+0x2e0>)
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	089b      	lsrs	r3, r3, #2
 8001166:	3302      	adds	r3, #2
 8001168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	220f      	movs	r2, #15
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	4013      	ands	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a49      	ldr	r2, [pc, #292]	; (80012ac <HAL_GPIO_Init+0x2e4>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d00d      	beq.n	80011a8 <HAL_GPIO_Init+0x1e0>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a48      	ldr	r2, [pc, #288]	; (80012b0 <HAL_GPIO_Init+0x2e8>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d007      	beq.n	80011a4 <HAL_GPIO_Init+0x1dc>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a47      	ldr	r2, [pc, #284]	; (80012b4 <HAL_GPIO_Init+0x2ec>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d101      	bne.n	80011a0 <HAL_GPIO_Init+0x1d8>
 800119c:	2302      	movs	r3, #2
 800119e:	e004      	b.n	80011aa <HAL_GPIO_Init+0x1e2>
 80011a0:	2303      	movs	r3, #3
 80011a2:	e002      	b.n	80011aa <HAL_GPIO_Init+0x1e2>
 80011a4:	2301      	movs	r3, #1
 80011a6:	e000      	b.n	80011aa <HAL_GPIO_Init+0x1e2>
 80011a8:	2300      	movs	r3, #0
 80011aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ac:	f002 0203 	and.w	r2, r2, #3
 80011b0:	0092      	lsls	r2, r2, #2
 80011b2:	4093      	lsls	r3, r2
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011ba:	493b      	ldr	r1, [pc, #236]	; (80012a8 <HAL_GPIO_Init+0x2e0>)
 80011bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011be:	089b      	lsrs	r3, r3, #2
 80011c0:	3302      	adds	r3, #2
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011d4:	4b38      	ldr	r3, [pc, #224]	; (80012b8 <HAL_GPIO_Init+0x2f0>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4937      	ldr	r1, [pc, #220]	; (80012b8 <HAL_GPIO_Init+0x2f0>)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	600b      	str	r3, [r1, #0]
 80011e0:	e006      	b.n	80011f0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011e2:	4b35      	ldr	r3, [pc, #212]	; (80012b8 <HAL_GPIO_Init+0x2f0>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	4933      	ldr	r1, [pc, #204]	; (80012b8 <HAL_GPIO_Init+0x2f0>)
 80011ec:	4013      	ands	r3, r2
 80011ee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d006      	beq.n	800120a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011fc:	4b2e      	ldr	r3, [pc, #184]	; (80012b8 <HAL_GPIO_Init+0x2f0>)
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	492d      	ldr	r1, [pc, #180]	; (80012b8 <HAL_GPIO_Init+0x2f0>)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	604b      	str	r3, [r1, #4]
 8001208:	e006      	b.n	8001218 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800120a:	4b2b      	ldr	r3, [pc, #172]	; (80012b8 <HAL_GPIO_Init+0x2f0>)
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	43db      	mvns	r3, r3
 8001212:	4929      	ldr	r1, [pc, #164]	; (80012b8 <HAL_GPIO_Init+0x2f0>)
 8001214:	4013      	ands	r3, r2
 8001216:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d006      	beq.n	8001232 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001224:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <HAL_GPIO_Init+0x2f0>)
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	4923      	ldr	r1, [pc, #140]	; (80012b8 <HAL_GPIO_Init+0x2f0>)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	608b      	str	r3, [r1, #8]
 8001230:	e006      	b.n	8001240 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <HAL_GPIO_Init+0x2f0>)
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	43db      	mvns	r3, r3
 800123a:	491f      	ldr	r1, [pc, #124]	; (80012b8 <HAL_GPIO_Init+0x2f0>)
 800123c:	4013      	ands	r3, r2
 800123e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d006      	beq.n	800125a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <HAL_GPIO_Init+0x2f0>)
 800124e:	68da      	ldr	r2, [r3, #12]
 8001250:	4919      	ldr	r1, [pc, #100]	; (80012b8 <HAL_GPIO_Init+0x2f0>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	60cb      	str	r3, [r1, #12]
 8001258:	e006      	b.n	8001268 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <HAL_GPIO_Init+0x2f0>)
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	43db      	mvns	r3, r3
 8001262:	4915      	ldr	r1, [pc, #84]	; (80012b8 <HAL_GPIO_Init+0x2f0>)
 8001264:	4013      	ands	r3, r2
 8001266:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126a:	3301      	adds	r3, #1
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	fa22 f303 	lsr.w	r3, r2, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	f47f aeaf 	bne.w	8000fdc <HAL_GPIO_Init+0x14>
  }
}
 800127e:	bf00      	nop
 8001280:	bf00      	nop
 8001282:	372c      	adds	r7, #44	; 0x2c
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	10320000 	.word	0x10320000
 8001290:	10310000 	.word	0x10310000
 8001294:	10220000 	.word	0x10220000
 8001298:	10210000 	.word	0x10210000
 800129c:	10120000 	.word	0x10120000
 80012a0:	10110000 	.word	0x10110000
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40010000 	.word	0x40010000
 80012ac:	40010800 	.word	0x40010800
 80012b0:	40010c00 	.word	0x40010c00
 80012b4:	40011000 	.word	0x40011000
 80012b8:	40010400 	.word	0x40010400

080012bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	807b      	strh	r3, [r7, #2]
 80012c8:	4613      	mov	r3, r2
 80012ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012cc:	787b      	ldrb	r3, [r7, #1]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012d2:	887a      	ldrh	r2, [r7, #2]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012d8:	e003      	b.n	80012e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012da:	887b      	ldrh	r3, [r7, #2]
 80012dc:	041a      	lsls	r2, r3, #16
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	611a      	str	r2, [r3, #16]
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012fe:	887a      	ldrh	r2, [r7, #2]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4013      	ands	r3, r2
 8001304:	041a      	lsls	r2, r3, #16
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	43d9      	mvns	r1, r3
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	400b      	ands	r3, r1
 800130e:	431a      	orrs	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	611a      	str	r2, [r3, #16]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
	...

08001320 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e26c      	b.n	800180c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 8087 	beq.w	800144e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001340:	4b92      	ldr	r3, [pc, #584]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 030c 	and.w	r3, r3, #12
 8001348:	2b04      	cmp	r3, #4
 800134a:	d00c      	beq.n	8001366 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800134c:	4b8f      	ldr	r3, [pc, #572]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 030c 	and.w	r3, r3, #12
 8001354:	2b08      	cmp	r3, #8
 8001356:	d112      	bne.n	800137e <HAL_RCC_OscConfig+0x5e>
 8001358:	4b8c      	ldr	r3, [pc, #560]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001364:	d10b      	bne.n	800137e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001366:	4b89      	ldr	r3, [pc, #548]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d06c      	beq.n	800144c <HAL_RCC_OscConfig+0x12c>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d168      	bne.n	800144c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e246      	b.n	800180c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001386:	d106      	bne.n	8001396 <HAL_RCC_OscConfig+0x76>
 8001388:	4b80      	ldr	r3, [pc, #512]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a7f      	ldr	r2, [pc, #508]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 800138e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	e02e      	b.n	80013f4 <HAL_RCC_OscConfig+0xd4>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10c      	bne.n	80013b8 <HAL_RCC_OscConfig+0x98>
 800139e:	4b7b      	ldr	r3, [pc, #492]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a7a      	ldr	r2, [pc, #488]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80013a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	4b78      	ldr	r3, [pc, #480]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a77      	ldr	r2, [pc, #476]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80013b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	e01d      	b.n	80013f4 <HAL_RCC_OscConfig+0xd4>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013c0:	d10c      	bne.n	80013dc <HAL_RCC_OscConfig+0xbc>
 80013c2:	4b72      	ldr	r3, [pc, #456]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a71      	ldr	r2, [pc, #452]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80013c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	4b6f      	ldr	r3, [pc, #444]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a6e      	ldr	r2, [pc, #440]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80013d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e00b      	b.n	80013f4 <HAL_RCC_OscConfig+0xd4>
 80013dc:	4b6b      	ldr	r3, [pc, #428]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a6a      	ldr	r2, [pc, #424]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80013e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	4b68      	ldr	r3, [pc, #416]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a67      	ldr	r2, [pc, #412]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80013ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d013      	beq.n	8001424 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fc:	f7ff fccc 	bl	8000d98 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001404:	f7ff fcc8 	bl	8000d98 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b64      	cmp	r3, #100	; 0x64
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e1fa      	b.n	800180c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001416:	4b5d      	ldr	r3, [pc, #372]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f0      	beq.n	8001404 <HAL_RCC_OscConfig+0xe4>
 8001422:	e014      	b.n	800144e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001424:	f7ff fcb8 	bl	8000d98 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800142c:	f7ff fcb4 	bl	8000d98 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b64      	cmp	r3, #100	; 0x64
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e1e6      	b.n	800180c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143e:	4b53      	ldr	r3, [pc, #332]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1f0      	bne.n	800142c <HAL_RCC_OscConfig+0x10c>
 800144a:	e000      	b.n	800144e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800144c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d063      	beq.n	8001522 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800145a:	4b4c      	ldr	r3, [pc, #304]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f003 030c 	and.w	r3, r3, #12
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00b      	beq.n	800147e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001466:	4b49      	ldr	r3, [pc, #292]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f003 030c 	and.w	r3, r3, #12
 800146e:	2b08      	cmp	r3, #8
 8001470:	d11c      	bne.n	80014ac <HAL_RCC_OscConfig+0x18c>
 8001472:	4b46      	ldr	r3, [pc, #280]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d116      	bne.n	80014ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147e:	4b43      	ldr	r3, [pc, #268]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d005      	beq.n	8001496 <HAL_RCC_OscConfig+0x176>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d001      	beq.n	8001496 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e1ba      	b.n	800180c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001496:	4b3d      	ldr	r3, [pc, #244]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4939      	ldr	r1, [pc, #228]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014aa:	e03a      	b.n	8001522 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d020      	beq.n	80014f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b4:	4b36      	ldr	r3, [pc, #216]	; (8001590 <HAL_RCC_OscConfig+0x270>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ba:	f7ff fc6d 	bl	8000d98 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c2:	f7ff fc69 	bl	8000d98 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e19b      	b.n	800180c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d4:	4b2d      	ldr	r3, [pc, #180]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e0:	4b2a      	ldr	r3, [pc, #168]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	4927      	ldr	r1, [pc, #156]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]
 80014f4:	e015      	b.n	8001522 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014f6:	4b26      	ldr	r3, [pc, #152]	; (8001590 <HAL_RCC_OscConfig+0x270>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fc4c 	bl	8000d98 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001504:	f7ff fc48 	bl	8000d98 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e17a      	b.n	800180c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001516:	4b1d      	ldr	r3, [pc, #116]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	2b00      	cmp	r3, #0
 800152c:	d03a      	beq.n	80015a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d019      	beq.n	800156a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001536:	4b17      	ldr	r3, [pc, #92]	; (8001594 <HAL_RCC_OscConfig+0x274>)
 8001538:	2201      	movs	r2, #1
 800153a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153c:	f7ff fc2c 	bl	8000d98 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001544:	f7ff fc28 	bl	8000d98 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e15a      	b.n	800180c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001556:	4b0d      	ldr	r3, [pc, #52]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 8001558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001562:	2001      	movs	r0, #1
 8001564:	f000 fad8 	bl	8001b18 <RCC_Delay>
 8001568:	e01c      	b.n	80015a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <HAL_RCC_OscConfig+0x274>)
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001570:	f7ff fc12 	bl	8000d98 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001576:	e00f      	b.n	8001598 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001578:	f7ff fc0e 	bl	8000d98 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d908      	bls.n	8001598 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e140      	b.n	800180c <HAL_RCC_OscConfig+0x4ec>
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000
 8001590:	42420000 	.word	0x42420000
 8001594:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001598:	4b9e      	ldr	r3, [pc, #632]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1e9      	bne.n	8001578 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 80a6 	beq.w	80016fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b2:	2300      	movs	r3, #0
 80015b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015b6:	4b97      	ldr	r3, [pc, #604]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10d      	bne.n	80015de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c2:	4b94      	ldr	r3, [pc, #592]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	4a93      	ldr	r2, [pc, #588]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 80015c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015cc:	61d3      	str	r3, [r2, #28]
 80015ce:	4b91      	ldr	r3, [pc, #580]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015da:	2301      	movs	r3, #1
 80015dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015de:	4b8e      	ldr	r3, [pc, #568]	; (8001818 <HAL_RCC_OscConfig+0x4f8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d118      	bne.n	800161c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ea:	4b8b      	ldr	r3, [pc, #556]	; (8001818 <HAL_RCC_OscConfig+0x4f8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a8a      	ldr	r2, [pc, #552]	; (8001818 <HAL_RCC_OscConfig+0x4f8>)
 80015f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015f6:	f7ff fbcf 	bl	8000d98 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015fe:	f7ff fbcb 	bl	8000d98 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b64      	cmp	r3, #100	; 0x64
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e0fd      	b.n	800180c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001610:	4b81      	ldr	r3, [pc, #516]	; (8001818 <HAL_RCC_OscConfig+0x4f8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d106      	bne.n	8001632 <HAL_RCC_OscConfig+0x312>
 8001624:	4b7b      	ldr	r3, [pc, #492]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	4a7a      	ldr	r2, [pc, #488]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6213      	str	r3, [r2, #32]
 8001630:	e02d      	b.n	800168e <HAL_RCC_OscConfig+0x36e>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10c      	bne.n	8001654 <HAL_RCC_OscConfig+0x334>
 800163a:	4b76      	ldr	r3, [pc, #472]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	4a75      	ldr	r2, [pc, #468]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	6213      	str	r3, [r2, #32]
 8001646:	4b73      	ldr	r3, [pc, #460]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	4a72      	ldr	r2, [pc, #456]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 800164c:	f023 0304 	bic.w	r3, r3, #4
 8001650:	6213      	str	r3, [r2, #32]
 8001652:	e01c      	b.n	800168e <HAL_RCC_OscConfig+0x36e>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	2b05      	cmp	r3, #5
 800165a:	d10c      	bne.n	8001676 <HAL_RCC_OscConfig+0x356>
 800165c:	4b6d      	ldr	r3, [pc, #436]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	4a6c      	ldr	r2, [pc, #432]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 8001662:	f043 0304 	orr.w	r3, r3, #4
 8001666:	6213      	str	r3, [r2, #32]
 8001668:	4b6a      	ldr	r3, [pc, #424]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	4a69      	ldr	r2, [pc, #420]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6213      	str	r3, [r2, #32]
 8001674:	e00b      	b.n	800168e <HAL_RCC_OscConfig+0x36e>
 8001676:	4b67      	ldr	r3, [pc, #412]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	4a66      	ldr	r2, [pc, #408]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 800167c:	f023 0301 	bic.w	r3, r3, #1
 8001680:	6213      	str	r3, [r2, #32]
 8001682:	4b64      	ldr	r3, [pc, #400]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	4a63      	ldr	r2, [pc, #396]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 8001688:	f023 0304 	bic.w	r3, r3, #4
 800168c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d015      	beq.n	80016c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001696:	f7ff fb7f 	bl	8000d98 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169c:	e00a      	b.n	80016b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800169e:	f7ff fb7b 	bl	8000d98 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e0ab      	b.n	800180c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b4:	4b57      	ldr	r3, [pc, #348]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0ee      	beq.n	800169e <HAL_RCC_OscConfig+0x37e>
 80016c0:	e014      	b.n	80016ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c2:	f7ff fb69 	bl	8000d98 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c8:	e00a      	b.n	80016e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ca:	f7ff fb65 	bl	8000d98 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d8:	4293      	cmp	r3, r2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e095      	b.n	800180c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e0:	4b4c      	ldr	r3, [pc, #304]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1ee      	bne.n	80016ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016ec:	7dfb      	ldrb	r3, [r7, #23]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d105      	bne.n	80016fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016f2:	4b48      	ldr	r3, [pc, #288]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	4a47      	ldr	r2, [pc, #284]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 80016f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 8081 	beq.w	800180a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001708:	4b42      	ldr	r3, [pc, #264]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 030c 	and.w	r3, r3, #12
 8001710:	2b08      	cmp	r3, #8
 8001712:	d061      	beq.n	80017d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69db      	ldr	r3, [r3, #28]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d146      	bne.n	80017aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171c:	4b3f      	ldr	r3, [pc, #252]	; (800181c <HAL_RCC_OscConfig+0x4fc>)
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001722:	f7ff fb39 	bl	8000d98 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172a:	f7ff fb35 	bl	8000d98 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e067      	b.n	800180c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800173c:	4b35      	ldr	r3, [pc, #212]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1f0      	bne.n	800172a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001750:	d108      	bne.n	8001764 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001752:	4b30      	ldr	r3, [pc, #192]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	492d      	ldr	r1, [pc, #180]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001764:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a19      	ldr	r1, [r3, #32]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001774:	430b      	orrs	r3, r1
 8001776:	4927      	ldr	r1, [pc, #156]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 8001778:	4313      	orrs	r3, r2
 800177a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800177c:	4b27      	ldr	r3, [pc, #156]	; (800181c <HAL_RCC_OscConfig+0x4fc>)
 800177e:	2201      	movs	r2, #1
 8001780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001782:	f7ff fb09 	bl	8000d98 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178a:	f7ff fb05 	bl	8000d98 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e037      	b.n	800180c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800179c:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f0      	beq.n	800178a <HAL_RCC_OscConfig+0x46a>
 80017a8:	e02f      	b.n	800180a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017aa:	4b1c      	ldr	r3, [pc, #112]	; (800181c <HAL_RCC_OscConfig+0x4fc>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff faf2 	bl	8000d98 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b8:	f7ff faee 	bl	8000d98 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e020      	b.n	800180c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ca:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x498>
 80017d6:	e018      	b.n	800180a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d101      	bne.n	80017e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e013      	b.n	800180c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <HAL_RCC_OscConfig+0x4f4>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d106      	bne.n	8001806 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001802:	429a      	cmp	r2, r3
 8001804:	d001      	beq.n	800180a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e000      	b.n	800180c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40021000 	.word	0x40021000
 8001818:	40007000 	.word	0x40007000
 800181c:	42420060 	.word	0x42420060

08001820 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e0d0      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001834:	4b6a      	ldr	r3, [pc, #424]	; (80019e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d910      	bls.n	8001864 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001842:	4b67      	ldr	r3, [pc, #412]	; (80019e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f023 0207 	bic.w	r2, r3, #7
 800184a:	4965      	ldr	r1, [pc, #404]	; (80019e0 <HAL_RCC_ClockConfig+0x1c0>)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	4313      	orrs	r3, r2
 8001850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001852:	4b63      	ldr	r3, [pc, #396]	; (80019e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d001      	beq.n	8001864 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0b8      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d020      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d005      	beq.n	8001888 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800187c:	4b59      	ldr	r3, [pc, #356]	; (80019e4 <HAL_RCC_ClockConfig+0x1c4>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	4a58      	ldr	r2, [pc, #352]	; (80019e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001882:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001886:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0308 	and.w	r3, r3, #8
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001894:	4b53      	ldr	r3, [pc, #332]	; (80019e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	4a52      	ldr	r2, [pc, #328]	; (80019e4 <HAL_RCC_ClockConfig+0x1c4>)
 800189a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800189e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a0:	4b50      	ldr	r3, [pc, #320]	; (80019e4 <HAL_RCC_ClockConfig+0x1c4>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	494d      	ldr	r1, [pc, #308]	; (80019e4 <HAL_RCC_ClockConfig+0x1c4>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d040      	beq.n	8001940 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d107      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c6:	4b47      	ldr	r3, [pc, #284]	; (80019e4 <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d115      	bne.n	80018fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e07f      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d107      	bne.n	80018ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018de:	4b41      	ldr	r3, [pc, #260]	; (80019e4 <HAL_RCC_ClockConfig+0x1c4>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d109      	bne.n	80018fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e073      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ee:	4b3d      	ldr	r3, [pc, #244]	; (80019e4 <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e06b      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018fe:	4b39      	ldr	r3, [pc, #228]	; (80019e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f023 0203 	bic.w	r2, r3, #3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	4936      	ldr	r1, [pc, #216]	; (80019e4 <HAL_RCC_ClockConfig+0x1c4>)
 800190c:	4313      	orrs	r3, r2
 800190e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001910:	f7ff fa42 	bl	8000d98 <HAL_GetTick>
 8001914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001916:	e00a      	b.n	800192e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001918:	f7ff fa3e 	bl	8000d98 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	f241 3288 	movw	r2, #5000	; 0x1388
 8001926:	4293      	cmp	r3, r2
 8001928:	d901      	bls.n	800192e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e053      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192e:	4b2d      	ldr	r3, [pc, #180]	; (80019e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 020c 	and.w	r2, r3, #12
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	429a      	cmp	r2, r3
 800193e:	d1eb      	bne.n	8001918 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001940:	4b27      	ldr	r3, [pc, #156]	; (80019e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d210      	bcs.n	8001970 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 0207 	bic.w	r2, r3, #7
 8001956:	4922      	ldr	r1, [pc, #136]	; (80019e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	4313      	orrs	r3, r2
 800195c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800195e:	4b20      	ldr	r3, [pc, #128]	; (80019e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e032      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	d008      	beq.n	800198e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800197c:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <HAL_RCC_ClockConfig+0x1c4>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	4916      	ldr	r1, [pc, #88]	; (80019e4 <HAL_RCC_ClockConfig+0x1c4>)
 800198a:	4313      	orrs	r3, r2
 800198c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b00      	cmp	r3, #0
 8001998:	d009      	beq.n	80019ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800199a:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_RCC_ClockConfig+0x1c4>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	490e      	ldr	r1, [pc, #56]	; (80019e4 <HAL_RCC_ClockConfig+0x1c4>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019ae:	f000 f821 	bl	80019f4 <HAL_RCC_GetSysClockFreq>
 80019b2:	4602      	mov	r2, r0
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <HAL_RCC_ClockConfig+0x1c4>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	091b      	lsrs	r3, r3, #4
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	490a      	ldr	r1, [pc, #40]	; (80019e8 <HAL_RCC_ClockConfig+0x1c8>)
 80019c0:	5ccb      	ldrb	r3, [r1, r3]
 80019c2:	fa22 f303 	lsr.w	r3, r2, r3
 80019c6:	4a09      	ldr	r2, [pc, #36]	; (80019ec <HAL_RCC_ClockConfig+0x1cc>)
 80019c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_RCC_ClockConfig+0x1d0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff f9a0 	bl	8000d14 <HAL_InitTick>

  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40022000 	.word	0x40022000
 80019e4:	40021000 	.word	0x40021000
 80019e8:	080037b0 	.word	0x080037b0
 80019ec:	2000000c 	.word	0x2000000c
 80019f0:	20000010 	.word	0x20000010

080019f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f4:	b490      	push	{r4, r7}
 80019f6:	b08a      	sub	sp, #40	; 0x28
 80019f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019fa:	4b2a      	ldr	r3, [pc, #168]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80019fc:	1d3c      	adds	r4, r7, #4
 80019fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a04:	f240 2301 	movw	r3, #513	; 0x201
 8001a08:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61bb      	str	r3, [r7, #24]
 8001a12:	2300      	movs	r3, #0
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a1e:	4b22      	ldr	r3, [pc, #136]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f003 030c 	and.w	r3, r3, #12
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	d002      	beq.n	8001a34 <HAL_RCC_GetSysClockFreq+0x40>
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d003      	beq.n	8001a3a <HAL_RCC_GetSysClockFreq+0x46>
 8001a32:	e02d      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a34:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a36:	623b      	str	r3, [r7, #32]
      break;
 8001a38:	e02d      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	0c9b      	lsrs	r3, r3, #18
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a46:	4413      	add	r3, r2
 8001a48:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a4c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d013      	beq.n	8001a80 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a58:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	0c5b      	lsrs	r3, r3, #17
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a66:	4413      	add	r3, r2
 8001a68:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a6c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	4a0e      	ldr	r2, [pc, #56]	; (8001aac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a72:	fb02 f203 	mul.w	r2, r2, r3
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a7e:	e004      	b.n	8001a8a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	4a0b      	ldr	r2, [pc, #44]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a84:	fb02 f303 	mul.w	r3, r2, r3
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	623b      	str	r3, [r7, #32]
      break;
 8001a8e:	e002      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a92:	623b      	str	r3, [r7, #32]
      break;
 8001a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a96:	6a3b      	ldr	r3, [r7, #32]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3728      	adds	r7, #40	; 0x28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc90      	pop	{r4, r7}
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	080037a0 	.word	0x080037a0
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	007a1200 	.word	0x007a1200
 8001ab0:	003d0900 	.word	0x003d0900

08001ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ab8:	4b02      	ldr	r3, [pc, #8]	; (8001ac4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	2000000c 	.word	0x2000000c

08001ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001acc:	f7ff fff2 	bl	8001ab4 <HAL_RCC_GetHCLKFreq>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	0a1b      	lsrs	r3, r3, #8
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	4903      	ldr	r1, [pc, #12]	; (8001aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ade:	5ccb      	ldrb	r3, [r1, r3]
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	080037c0 	.word	0x080037c0

08001af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001af4:	f7ff ffde 	bl	8001ab4 <HAL_RCC_GetHCLKFreq>
 8001af8:	4602      	mov	r2, r0
 8001afa:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	0adb      	lsrs	r3, r3, #11
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	4903      	ldr	r1, [pc, #12]	; (8001b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b06:	5ccb      	ldrb	r3, [r1, r3]
 8001b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40021000 	.word	0x40021000
 8001b14:	080037c0 	.word	0x080037c0

08001b18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b20:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <RCC_Delay+0x34>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <RCC_Delay+0x38>)
 8001b26:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2a:	0a5b      	lsrs	r3, r3, #9
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	fb02 f303 	mul.w	r3, r2, r3
 8001b32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b34:	bf00      	nop
  }
  while (Delay --);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	1e5a      	subs	r2, r3, #1
 8001b3a:	60fa      	str	r2, [r7, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f9      	bne.n	8001b34 <RCC_Delay+0x1c>
}
 8001b40:	bf00      	nop
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr
 8001b4c:	2000000c 	.word	0x2000000c
 8001b50:	10624dd3 	.word	0x10624dd3

08001b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e041      	b.n	8001bea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d106      	bne.n	8001b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7fe ff24 	bl	80009c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2202      	movs	r2, #2
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3304      	adds	r3, #4
 8001b90:	4619      	mov	r1, r3
 8001b92:	4610      	mov	r0, r2
 8001b94:	f000 fa6a 	bl	800206c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d001      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e035      	b.n	8001c78 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2202      	movs	r2, #2
 8001c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0201 	orr.w	r2, r2, #1
 8001c22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a16      	ldr	r2, [pc, #88]	; (8001c84 <HAL_TIM_Base_Start_IT+0x90>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d009      	beq.n	8001c42 <HAL_TIM_Base_Start_IT+0x4e>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c36:	d004      	beq.n	8001c42 <HAL_TIM_Base_Start_IT+0x4e>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a12      	ldr	r2, [pc, #72]	; (8001c88 <HAL_TIM_Base_Start_IT+0x94>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d111      	bne.n	8001c66 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2b06      	cmp	r3, #6
 8001c52:	d010      	beq.n	8001c76 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0201 	orr.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c64:	e007      	b.n	8001c76 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 0201 	orr.w	r2, r2, #1
 8001c74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40012c00 	.word	0x40012c00
 8001c88:	40000400 	.word	0x40000400

08001c8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d122      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d11b      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f06f 0202 	mvn.w	r2, #2
 8001cb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f9b1 	bl	8002036 <HAL_TIM_IC_CaptureCallback>
 8001cd4:	e005      	b.n	8001ce2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f9a4 	bl	8002024 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f9b3 	bl	8002048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d122      	bne.n	8001d3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	d11b      	bne.n	8001d3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f06f 0204 	mvn.w	r2, #4
 8001d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2202      	movs	r2, #2
 8001d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f987 	bl	8002036 <HAL_TIM_IC_CaptureCallback>
 8001d28:	e005      	b.n	8001d36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f97a 	bl	8002024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f989 	bl	8002048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d122      	bne.n	8001d90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f003 0308 	and.w	r3, r3, #8
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d11b      	bne.n	8001d90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f06f 0208 	mvn.w	r2, #8
 8001d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2204      	movs	r2, #4
 8001d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f95d 	bl	8002036 <HAL_TIM_IC_CaptureCallback>
 8001d7c:	e005      	b.n	8001d8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f950 	bl	8002024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f95f 	bl	8002048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	2b10      	cmp	r3, #16
 8001d9c:	d122      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f003 0310 	and.w	r3, r3, #16
 8001da8:	2b10      	cmp	r3, #16
 8001daa:	d11b      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f06f 0210 	mvn.w	r2, #16
 8001db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2208      	movs	r2, #8
 8001dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f933 	bl	8002036 <HAL_TIM_IC_CaptureCallback>
 8001dd0:	e005      	b.n	8001dde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f926 	bl	8002024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f935 	bl	8002048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d10e      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d107      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f06f 0201 	mvn.w	r2, #1
 8001e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7fe fd96 	bl	800093c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1a:	2b80      	cmp	r3, #128	; 0x80
 8001e1c:	d10e      	bne.n	8001e3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e28:	2b80      	cmp	r3, #128	; 0x80
 8001e2a:	d107      	bne.n	8001e3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 fa67 	bl	800230a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e46:	2b40      	cmp	r3, #64	; 0x40
 8001e48:	d10e      	bne.n	8001e68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e54:	2b40      	cmp	r3, #64	; 0x40
 8001e56:	d107      	bne.n	8001e68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f8f9 	bl	800205a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f003 0320 	and.w	r3, r3, #32
 8001e72:	2b20      	cmp	r3, #32
 8001e74:	d10e      	bne.n	8001e94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f003 0320 	and.w	r3, r3, #32
 8001e80:	2b20      	cmp	r3, #32
 8001e82:	d107      	bne.n	8001e94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f06f 0220 	mvn.w	r2, #32
 8001e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 fa32 	bl	80022f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_TIM_ConfigClockSource+0x18>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e0b3      	b.n	800201c <HAL_TIM_ConfigClockSource+0x180>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001ed2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001eda:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eec:	d03e      	beq.n	8001f6c <HAL_TIM_ConfigClockSource+0xd0>
 8001eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ef2:	f200 8087 	bhi.w	8002004 <HAL_TIM_ConfigClockSource+0x168>
 8001ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001efa:	f000 8085 	beq.w	8002008 <HAL_TIM_ConfigClockSource+0x16c>
 8001efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f02:	d87f      	bhi.n	8002004 <HAL_TIM_ConfigClockSource+0x168>
 8001f04:	2b70      	cmp	r3, #112	; 0x70
 8001f06:	d01a      	beq.n	8001f3e <HAL_TIM_ConfigClockSource+0xa2>
 8001f08:	2b70      	cmp	r3, #112	; 0x70
 8001f0a:	d87b      	bhi.n	8002004 <HAL_TIM_ConfigClockSource+0x168>
 8001f0c:	2b60      	cmp	r3, #96	; 0x60
 8001f0e:	d050      	beq.n	8001fb2 <HAL_TIM_ConfigClockSource+0x116>
 8001f10:	2b60      	cmp	r3, #96	; 0x60
 8001f12:	d877      	bhi.n	8002004 <HAL_TIM_ConfigClockSource+0x168>
 8001f14:	2b50      	cmp	r3, #80	; 0x50
 8001f16:	d03c      	beq.n	8001f92 <HAL_TIM_ConfigClockSource+0xf6>
 8001f18:	2b50      	cmp	r3, #80	; 0x50
 8001f1a:	d873      	bhi.n	8002004 <HAL_TIM_ConfigClockSource+0x168>
 8001f1c:	2b40      	cmp	r3, #64	; 0x40
 8001f1e:	d058      	beq.n	8001fd2 <HAL_TIM_ConfigClockSource+0x136>
 8001f20:	2b40      	cmp	r3, #64	; 0x40
 8001f22:	d86f      	bhi.n	8002004 <HAL_TIM_ConfigClockSource+0x168>
 8001f24:	2b30      	cmp	r3, #48	; 0x30
 8001f26:	d064      	beq.n	8001ff2 <HAL_TIM_ConfigClockSource+0x156>
 8001f28:	2b30      	cmp	r3, #48	; 0x30
 8001f2a:	d86b      	bhi.n	8002004 <HAL_TIM_ConfigClockSource+0x168>
 8001f2c:	2b20      	cmp	r3, #32
 8001f2e:	d060      	beq.n	8001ff2 <HAL_TIM_ConfigClockSource+0x156>
 8001f30:	2b20      	cmp	r3, #32
 8001f32:	d867      	bhi.n	8002004 <HAL_TIM_ConfigClockSource+0x168>
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d05c      	beq.n	8001ff2 <HAL_TIM_ConfigClockSource+0x156>
 8001f38:	2b10      	cmp	r3, #16
 8001f3a:	d05a      	beq.n	8001ff2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001f3c:	e062      	b.n	8002004 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6818      	ldr	r0, [r3, #0]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	6899      	ldr	r1, [r3, #8]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f000 f95c 	bl	800220a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f60:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	609a      	str	r2, [r3, #8]
      break;
 8001f6a:	e04e      	b.n	800200a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6818      	ldr	r0, [r3, #0]
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	6899      	ldr	r1, [r3, #8]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f000 f945 	bl	800220a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f8e:	609a      	str	r2, [r3, #8]
      break;
 8001f90:	e03b      	b.n	800200a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6818      	ldr	r0, [r3, #0]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	6859      	ldr	r1, [r3, #4]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	f000 f8bc 	bl	800211c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2150      	movs	r1, #80	; 0x50
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 f913 	bl	80021d6 <TIM_ITRx_SetConfig>
      break;
 8001fb0:	e02b      	b.n	800200a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	6859      	ldr	r1, [r3, #4]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	f000 f8da 	bl	8002178 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2160      	movs	r1, #96	; 0x60
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 f903 	bl	80021d6 <TIM_ITRx_SetConfig>
      break;
 8001fd0:	e01b      	b.n	800200a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6818      	ldr	r0, [r3, #0]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	6859      	ldr	r1, [r3, #4]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	f000 f89c 	bl	800211c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2140      	movs	r1, #64	; 0x40
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 f8f3 	bl	80021d6 <TIM_ITRx_SetConfig>
      break;
 8001ff0:	e00b      	b.n	800200a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	f000 f8ea 	bl	80021d6 <TIM_ITRx_SetConfig>
        break;
 8002002:	e002      	b.n	800200a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002004:	bf00      	nop
 8002006:	e000      	b.n	800200a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002008:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr

08002036 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr

08002048 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr

0800205a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a25      	ldr	r2, [pc, #148]	; (8002114 <TIM_Base_SetConfig+0xa8>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d007      	beq.n	8002094 <TIM_Base_SetConfig+0x28>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800208a:	d003      	beq.n	8002094 <TIM_Base_SetConfig+0x28>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a22      	ldr	r2, [pc, #136]	; (8002118 <TIM_Base_SetConfig+0xac>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d108      	bne.n	80020a6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800209a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a1a      	ldr	r2, [pc, #104]	; (8002114 <TIM_Base_SetConfig+0xa8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d007      	beq.n	80020be <TIM_Base_SetConfig+0x52>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b4:	d003      	beq.n	80020be <TIM_Base_SetConfig+0x52>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a17      	ldr	r2, [pc, #92]	; (8002118 <TIM_Base_SetConfig+0xac>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d108      	bne.n	80020d0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	4313      	orrs	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a07      	ldr	r2, [pc, #28]	; (8002114 <TIM_Base_SetConfig+0xa8>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d103      	bne.n	8002104 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	615a      	str	r2, [r3, #20]
}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr
 8002114:	40012c00 	.word	0x40012c00
 8002118:	40000400 	.word	0x40000400

0800211c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800211c:	b480      	push	{r7}
 800211e:	b087      	sub	sp, #28
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	f023 0201 	bic.w	r2, r3, #1
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002146:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	011b      	lsls	r3, r3, #4
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f023 030a 	bic.w	r3, r3, #10
 8002158:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	4313      	orrs	r3, r2
 8002160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	621a      	str	r2, [r3, #32]
}
 800216e:	bf00      	nop
 8002170:	371c      	adds	r7, #28
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr

08002178 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002178:	b480      	push	{r7}
 800217a:	b087      	sub	sp, #28
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	f023 0210 	bic.w	r2, r3, #16
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	031b      	lsls	r3, r3, #12
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80021b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	621a      	str	r2, [r3, #32]
}
 80021cc:	bf00      	nop
 80021ce:	371c      	adds	r7, #28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr

080021d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b085      	sub	sp, #20
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	f043 0307 	orr.w	r3, r3, #7
 80021f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	609a      	str	r2, [r3, #8]
}
 8002200:	bf00      	nop
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr

0800220a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800220a:	b480      	push	{r7}
 800220c:	b087      	sub	sp, #28
 800220e:	af00      	add	r7, sp, #0
 8002210:	60f8      	str	r0, [r7, #12]
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
 8002216:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002224:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	021a      	lsls	r2, r3, #8
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	431a      	orrs	r2, r3
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	4313      	orrs	r3, r2
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4313      	orrs	r3, r2
 8002236:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	609a      	str	r2, [r3, #8]
}
 800223e:	bf00      	nop
 8002240:	371c      	adds	r7, #28
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800225c:	2302      	movs	r3, #2
 800225e:	e041      	b.n	80022e4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2202      	movs	r2, #2
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002286:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	4313      	orrs	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d009      	beq.n	80022b8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ac:	d004      	beq.n	80022b8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a10      	ldr	r2, [pc, #64]	; (80022f4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d10c      	bne.n	80022d2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40012c00 	.word	0x40012c00
 80022f4:	40000400 	.word	0x40000400

080022f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr

0800230a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e03f      	b.n	80023ae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d106      	bne.n	8002348 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7fe fb64 	bl	8000a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2224      	movs	r2, #36	; 0x24
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800235e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f905 	bl	8002570 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002374:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	695a      	ldr	r2, [r3, #20]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002384:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002394:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2220      	movs	r2, #32
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b08a      	sub	sp, #40	; 0x28
 80023ba:	af02      	add	r7, sp, #8
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	603b      	str	r3, [r7, #0]
 80023c2:	4613      	mov	r3, r2
 80023c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b20      	cmp	r3, #32
 80023d4:	d17c      	bne.n	80024d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <HAL_UART_Transmit+0x2c>
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e075      	b.n	80024d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_UART_Transmit+0x3e>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e06e      	b.n	80024d2 <HAL_UART_Transmit+0x11c>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2221      	movs	r2, #33	; 0x21
 8002406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800240a:	f7fe fcc5 	bl	8000d98 <HAL_GetTick>
 800240e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	88fa      	ldrh	r2, [r7, #6]
 8002414:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	88fa      	ldrh	r2, [r7, #6]
 800241a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002424:	d108      	bne.n	8002438 <HAL_UART_Transmit+0x82>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d104      	bne.n	8002438 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	61bb      	str	r3, [r7, #24]
 8002436:	e003      	b.n	8002440 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800243c:	2300      	movs	r3, #0
 800243e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002448:	e02a      	b.n	80024a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	2200      	movs	r2, #0
 8002452:	2180      	movs	r1, #128	; 0x80
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f000 f840 	bl	80024da <UART_WaitOnFlagUntilTimeout>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e036      	b.n	80024d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10b      	bne.n	8002482 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	461a      	mov	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002478:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	3302      	adds	r3, #2
 800247e:	61bb      	str	r3, [r7, #24]
 8002480:	e007      	b.n	8002492 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	781a      	ldrb	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	3301      	adds	r3, #1
 8002490:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002496:	b29b      	uxth	r3, r3
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1cf      	bne.n	800244a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2200      	movs	r2, #0
 80024b2:	2140      	movs	r1, #64	; 0x40
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 f810 	bl	80024da <UART_WaitOnFlagUntilTimeout>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e006      	b.n	80024d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2220      	movs	r2, #32
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	e000      	b.n	80024d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024d0:	2302      	movs	r3, #2
  }
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3720      	adds	r7, #32
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b084      	sub	sp, #16
 80024de:	af00      	add	r7, sp, #0
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	603b      	str	r3, [r7, #0]
 80024e6:	4613      	mov	r3, r2
 80024e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024ea:	e02c      	b.n	8002546 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f2:	d028      	beq.n	8002546 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d007      	beq.n	800250a <UART_WaitOnFlagUntilTimeout+0x30>
 80024fa:	f7fe fc4d 	bl	8000d98 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	429a      	cmp	r2, r3
 8002508:	d21d      	bcs.n	8002546 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002518:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	695a      	ldr	r2, [r3, #20]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0201 	bic.w	r2, r2, #1
 8002528:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2220      	movs	r2, #32
 800252e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2220      	movs	r2, #32
 8002536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e00f      	b.n	8002566 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	4013      	ands	r3, r2
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	429a      	cmp	r2, r3
 8002554:	bf0c      	ite	eq
 8002556:	2301      	moveq	r3, #1
 8002558:	2300      	movne	r3, #0
 800255a:	b2db      	uxtb	r3, r3
 800255c:	461a      	mov	r2, r3
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	429a      	cmp	r2, r3
 8002562:	d0c3      	beq.n	80024ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	4313      	orrs	r3, r2
 800259e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80025aa:	f023 030c 	bic.w	r3, r3, #12
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	68b9      	ldr	r1, [r7, #8]
 80025b4:	430b      	orrs	r3, r1
 80025b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699a      	ldr	r2, [r3, #24]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a2c      	ldr	r2, [pc, #176]	; (8002684 <UART_SetConfig+0x114>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d103      	bne.n	80025e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025d8:	f7ff fa8a 	bl	8001af0 <HAL_RCC_GetPCLK2Freq>
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	e002      	b.n	80025e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025e0:	f7ff fa72 	bl	8001ac8 <HAL_RCC_GetPCLK1Freq>
 80025e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	009a      	lsls	r2, r3, #2
 80025f0:	441a      	add	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fc:	4a22      	ldr	r2, [pc, #136]	; (8002688 <UART_SetConfig+0x118>)
 80025fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	0119      	lsls	r1, r3, #4
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	009a      	lsls	r2, r3, #2
 8002610:	441a      	add	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	fbb2 f2f3 	udiv	r2, r2, r3
 800261c:	4b1a      	ldr	r3, [pc, #104]	; (8002688 <UART_SetConfig+0x118>)
 800261e:	fba3 0302 	umull	r0, r3, r3, r2
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	2064      	movs	r0, #100	; 0x64
 8002626:	fb00 f303 	mul.w	r3, r0, r3
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	3332      	adds	r3, #50	; 0x32
 8002630:	4a15      	ldr	r2, [pc, #84]	; (8002688 <UART_SetConfig+0x118>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800263c:	4419      	add	r1, r3
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	009a      	lsls	r2, r3, #2
 8002648:	441a      	add	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	fbb2 f2f3 	udiv	r2, r2, r3
 8002654:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <UART_SetConfig+0x118>)
 8002656:	fba3 0302 	umull	r0, r3, r3, r2
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	2064      	movs	r0, #100	; 0x64
 800265e:	fb00 f303 	mul.w	r3, r0, r3
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	3332      	adds	r3, #50	; 0x32
 8002668:	4a07      	ldr	r2, [pc, #28]	; (8002688 <UART_SetConfig+0x118>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	f003 020f 	and.w	r2, r3, #15
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	440a      	add	r2, r1
 800267a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800267c:	bf00      	nop
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40013800 	.word	0x40013800
 8002688:	51eb851f 	.word	0x51eb851f

0800268c <__errno>:
 800268c:	4b01      	ldr	r3, [pc, #4]	; (8002694 <__errno+0x8>)
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000018 	.word	0x20000018

08002698 <__libc_init_array>:
 8002698:	b570      	push	{r4, r5, r6, lr}
 800269a:	2600      	movs	r6, #0
 800269c:	4d0c      	ldr	r5, [pc, #48]	; (80026d0 <__libc_init_array+0x38>)
 800269e:	4c0d      	ldr	r4, [pc, #52]	; (80026d4 <__libc_init_array+0x3c>)
 80026a0:	1b64      	subs	r4, r4, r5
 80026a2:	10a4      	asrs	r4, r4, #2
 80026a4:	42a6      	cmp	r6, r4
 80026a6:	d109      	bne.n	80026bc <__libc_init_array+0x24>
 80026a8:	f000 fff8 	bl	800369c <_init>
 80026ac:	2600      	movs	r6, #0
 80026ae:	4d0a      	ldr	r5, [pc, #40]	; (80026d8 <__libc_init_array+0x40>)
 80026b0:	4c0a      	ldr	r4, [pc, #40]	; (80026dc <__libc_init_array+0x44>)
 80026b2:	1b64      	subs	r4, r4, r5
 80026b4:	10a4      	asrs	r4, r4, #2
 80026b6:	42a6      	cmp	r6, r4
 80026b8:	d105      	bne.n	80026c6 <__libc_init_array+0x2e>
 80026ba:	bd70      	pop	{r4, r5, r6, pc}
 80026bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80026c0:	4798      	blx	r3
 80026c2:	3601      	adds	r6, #1
 80026c4:	e7ee      	b.n	80026a4 <__libc_init_array+0xc>
 80026c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80026ca:	4798      	blx	r3
 80026cc:	3601      	adds	r6, #1
 80026ce:	e7f2      	b.n	80026b6 <__libc_init_array+0x1e>
 80026d0:	08003860 	.word	0x08003860
 80026d4:	08003860 	.word	0x08003860
 80026d8:	08003860 	.word	0x08003860
 80026dc:	08003864 	.word	0x08003864

080026e0 <memset>:
 80026e0:	4603      	mov	r3, r0
 80026e2:	4402      	add	r2, r0
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d100      	bne.n	80026ea <memset+0xa>
 80026e8:	4770      	bx	lr
 80026ea:	f803 1b01 	strb.w	r1, [r3], #1
 80026ee:	e7f9      	b.n	80026e4 <memset+0x4>

080026f0 <iprintf>:
 80026f0:	b40f      	push	{r0, r1, r2, r3}
 80026f2:	4b0a      	ldr	r3, [pc, #40]	; (800271c <iprintf+0x2c>)
 80026f4:	b513      	push	{r0, r1, r4, lr}
 80026f6:	681c      	ldr	r4, [r3, #0]
 80026f8:	b124      	cbz	r4, 8002704 <iprintf+0x14>
 80026fa:	69a3      	ldr	r3, [r4, #24]
 80026fc:	b913      	cbnz	r3, 8002704 <iprintf+0x14>
 80026fe:	4620      	mov	r0, r4
 8002700:	f000 fa5e 	bl	8002bc0 <__sinit>
 8002704:	ab05      	add	r3, sp, #20
 8002706:	4620      	mov	r0, r4
 8002708:	9a04      	ldr	r2, [sp, #16]
 800270a:	68a1      	ldr	r1, [r4, #8]
 800270c:	9301      	str	r3, [sp, #4]
 800270e:	f000 fc29 	bl	8002f64 <_vfiprintf_r>
 8002712:	b002      	add	sp, #8
 8002714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002718:	b004      	add	sp, #16
 800271a:	4770      	bx	lr
 800271c:	20000018 	.word	0x20000018

08002720 <_puts_r>:
 8002720:	b570      	push	{r4, r5, r6, lr}
 8002722:	460e      	mov	r6, r1
 8002724:	4605      	mov	r5, r0
 8002726:	b118      	cbz	r0, 8002730 <_puts_r+0x10>
 8002728:	6983      	ldr	r3, [r0, #24]
 800272a:	b90b      	cbnz	r3, 8002730 <_puts_r+0x10>
 800272c:	f000 fa48 	bl	8002bc0 <__sinit>
 8002730:	69ab      	ldr	r3, [r5, #24]
 8002732:	68ac      	ldr	r4, [r5, #8]
 8002734:	b913      	cbnz	r3, 800273c <_puts_r+0x1c>
 8002736:	4628      	mov	r0, r5
 8002738:	f000 fa42 	bl	8002bc0 <__sinit>
 800273c:	4b2c      	ldr	r3, [pc, #176]	; (80027f0 <_puts_r+0xd0>)
 800273e:	429c      	cmp	r4, r3
 8002740:	d120      	bne.n	8002784 <_puts_r+0x64>
 8002742:	686c      	ldr	r4, [r5, #4]
 8002744:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002746:	07db      	lsls	r3, r3, #31
 8002748:	d405      	bmi.n	8002756 <_puts_r+0x36>
 800274a:	89a3      	ldrh	r3, [r4, #12]
 800274c:	0598      	lsls	r0, r3, #22
 800274e:	d402      	bmi.n	8002756 <_puts_r+0x36>
 8002750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002752:	f000 fad3 	bl	8002cfc <__retarget_lock_acquire_recursive>
 8002756:	89a3      	ldrh	r3, [r4, #12]
 8002758:	0719      	lsls	r1, r3, #28
 800275a:	d51d      	bpl.n	8002798 <_puts_r+0x78>
 800275c:	6923      	ldr	r3, [r4, #16]
 800275e:	b1db      	cbz	r3, 8002798 <_puts_r+0x78>
 8002760:	3e01      	subs	r6, #1
 8002762:	68a3      	ldr	r3, [r4, #8]
 8002764:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002768:	3b01      	subs	r3, #1
 800276a:	60a3      	str	r3, [r4, #8]
 800276c:	bb39      	cbnz	r1, 80027be <_puts_r+0x9e>
 800276e:	2b00      	cmp	r3, #0
 8002770:	da38      	bge.n	80027e4 <_puts_r+0xc4>
 8002772:	4622      	mov	r2, r4
 8002774:	210a      	movs	r1, #10
 8002776:	4628      	mov	r0, r5
 8002778:	f000 f848 	bl	800280c <__swbuf_r>
 800277c:	3001      	adds	r0, #1
 800277e:	d011      	beq.n	80027a4 <_puts_r+0x84>
 8002780:	250a      	movs	r5, #10
 8002782:	e011      	b.n	80027a8 <_puts_r+0x88>
 8002784:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <_puts_r+0xd4>)
 8002786:	429c      	cmp	r4, r3
 8002788:	d101      	bne.n	800278e <_puts_r+0x6e>
 800278a:	68ac      	ldr	r4, [r5, #8]
 800278c:	e7da      	b.n	8002744 <_puts_r+0x24>
 800278e:	4b1a      	ldr	r3, [pc, #104]	; (80027f8 <_puts_r+0xd8>)
 8002790:	429c      	cmp	r4, r3
 8002792:	bf08      	it	eq
 8002794:	68ec      	ldreq	r4, [r5, #12]
 8002796:	e7d5      	b.n	8002744 <_puts_r+0x24>
 8002798:	4621      	mov	r1, r4
 800279a:	4628      	mov	r0, r5
 800279c:	f000 f888 	bl	80028b0 <__swsetup_r>
 80027a0:	2800      	cmp	r0, #0
 80027a2:	d0dd      	beq.n	8002760 <_puts_r+0x40>
 80027a4:	f04f 35ff 	mov.w	r5, #4294967295
 80027a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027aa:	07da      	lsls	r2, r3, #31
 80027ac:	d405      	bmi.n	80027ba <_puts_r+0x9a>
 80027ae:	89a3      	ldrh	r3, [r4, #12]
 80027b0:	059b      	lsls	r3, r3, #22
 80027b2:	d402      	bmi.n	80027ba <_puts_r+0x9a>
 80027b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027b6:	f000 faa2 	bl	8002cfe <__retarget_lock_release_recursive>
 80027ba:	4628      	mov	r0, r5
 80027bc:	bd70      	pop	{r4, r5, r6, pc}
 80027be:	2b00      	cmp	r3, #0
 80027c0:	da04      	bge.n	80027cc <_puts_r+0xac>
 80027c2:	69a2      	ldr	r2, [r4, #24]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	dc06      	bgt.n	80027d6 <_puts_r+0xb6>
 80027c8:	290a      	cmp	r1, #10
 80027ca:	d004      	beq.n	80027d6 <_puts_r+0xb6>
 80027cc:	6823      	ldr	r3, [r4, #0]
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	6022      	str	r2, [r4, #0]
 80027d2:	7019      	strb	r1, [r3, #0]
 80027d4:	e7c5      	b.n	8002762 <_puts_r+0x42>
 80027d6:	4622      	mov	r2, r4
 80027d8:	4628      	mov	r0, r5
 80027da:	f000 f817 	bl	800280c <__swbuf_r>
 80027de:	3001      	adds	r0, #1
 80027e0:	d1bf      	bne.n	8002762 <_puts_r+0x42>
 80027e2:	e7df      	b.n	80027a4 <_puts_r+0x84>
 80027e4:	250a      	movs	r5, #10
 80027e6:	6823      	ldr	r3, [r4, #0]
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	6022      	str	r2, [r4, #0]
 80027ec:	701d      	strb	r5, [r3, #0]
 80027ee:	e7db      	b.n	80027a8 <_puts_r+0x88>
 80027f0:	080037ec 	.word	0x080037ec
 80027f4:	0800380c 	.word	0x0800380c
 80027f8:	080037cc 	.word	0x080037cc

080027fc <puts>:
 80027fc:	4b02      	ldr	r3, [pc, #8]	; (8002808 <puts+0xc>)
 80027fe:	4601      	mov	r1, r0
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	f7ff bf8d 	b.w	8002720 <_puts_r>
 8002806:	bf00      	nop
 8002808:	20000018 	.word	0x20000018

0800280c <__swbuf_r>:
 800280c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280e:	460e      	mov	r6, r1
 8002810:	4614      	mov	r4, r2
 8002812:	4605      	mov	r5, r0
 8002814:	b118      	cbz	r0, 800281e <__swbuf_r+0x12>
 8002816:	6983      	ldr	r3, [r0, #24]
 8002818:	b90b      	cbnz	r3, 800281e <__swbuf_r+0x12>
 800281a:	f000 f9d1 	bl	8002bc0 <__sinit>
 800281e:	4b21      	ldr	r3, [pc, #132]	; (80028a4 <__swbuf_r+0x98>)
 8002820:	429c      	cmp	r4, r3
 8002822:	d12b      	bne.n	800287c <__swbuf_r+0x70>
 8002824:	686c      	ldr	r4, [r5, #4]
 8002826:	69a3      	ldr	r3, [r4, #24]
 8002828:	60a3      	str	r3, [r4, #8]
 800282a:	89a3      	ldrh	r3, [r4, #12]
 800282c:	071a      	lsls	r2, r3, #28
 800282e:	d52f      	bpl.n	8002890 <__swbuf_r+0x84>
 8002830:	6923      	ldr	r3, [r4, #16]
 8002832:	b36b      	cbz	r3, 8002890 <__swbuf_r+0x84>
 8002834:	6923      	ldr	r3, [r4, #16]
 8002836:	6820      	ldr	r0, [r4, #0]
 8002838:	b2f6      	uxtb	r6, r6
 800283a:	1ac0      	subs	r0, r0, r3
 800283c:	6963      	ldr	r3, [r4, #20]
 800283e:	4637      	mov	r7, r6
 8002840:	4283      	cmp	r3, r0
 8002842:	dc04      	bgt.n	800284e <__swbuf_r+0x42>
 8002844:	4621      	mov	r1, r4
 8002846:	4628      	mov	r0, r5
 8002848:	f000 f926 	bl	8002a98 <_fflush_r>
 800284c:	bb30      	cbnz	r0, 800289c <__swbuf_r+0x90>
 800284e:	68a3      	ldr	r3, [r4, #8]
 8002850:	3001      	adds	r0, #1
 8002852:	3b01      	subs	r3, #1
 8002854:	60a3      	str	r3, [r4, #8]
 8002856:	6823      	ldr	r3, [r4, #0]
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	6022      	str	r2, [r4, #0]
 800285c:	701e      	strb	r6, [r3, #0]
 800285e:	6963      	ldr	r3, [r4, #20]
 8002860:	4283      	cmp	r3, r0
 8002862:	d004      	beq.n	800286e <__swbuf_r+0x62>
 8002864:	89a3      	ldrh	r3, [r4, #12]
 8002866:	07db      	lsls	r3, r3, #31
 8002868:	d506      	bpl.n	8002878 <__swbuf_r+0x6c>
 800286a:	2e0a      	cmp	r6, #10
 800286c:	d104      	bne.n	8002878 <__swbuf_r+0x6c>
 800286e:	4621      	mov	r1, r4
 8002870:	4628      	mov	r0, r5
 8002872:	f000 f911 	bl	8002a98 <_fflush_r>
 8002876:	b988      	cbnz	r0, 800289c <__swbuf_r+0x90>
 8002878:	4638      	mov	r0, r7
 800287a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800287c:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <__swbuf_r+0x9c>)
 800287e:	429c      	cmp	r4, r3
 8002880:	d101      	bne.n	8002886 <__swbuf_r+0x7a>
 8002882:	68ac      	ldr	r4, [r5, #8]
 8002884:	e7cf      	b.n	8002826 <__swbuf_r+0x1a>
 8002886:	4b09      	ldr	r3, [pc, #36]	; (80028ac <__swbuf_r+0xa0>)
 8002888:	429c      	cmp	r4, r3
 800288a:	bf08      	it	eq
 800288c:	68ec      	ldreq	r4, [r5, #12]
 800288e:	e7ca      	b.n	8002826 <__swbuf_r+0x1a>
 8002890:	4621      	mov	r1, r4
 8002892:	4628      	mov	r0, r5
 8002894:	f000 f80c 	bl	80028b0 <__swsetup_r>
 8002898:	2800      	cmp	r0, #0
 800289a:	d0cb      	beq.n	8002834 <__swbuf_r+0x28>
 800289c:	f04f 37ff 	mov.w	r7, #4294967295
 80028a0:	e7ea      	b.n	8002878 <__swbuf_r+0x6c>
 80028a2:	bf00      	nop
 80028a4:	080037ec 	.word	0x080037ec
 80028a8:	0800380c 	.word	0x0800380c
 80028ac:	080037cc 	.word	0x080037cc

080028b0 <__swsetup_r>:
 80028b0:	4b32      	ldr	r3, [pc, #200]	; (800297c <__swsetup_r+0xcc>)
 80028b2:	b570      	push	{r4, r5, r6, lr}
 80028b4:	681d      	ldr	r5, [r3, #0]
 80028b6:	4606      	mov	r6, r0
 80028b8:	460c      	mov	r4, r1
 80028ba:	b125      	cbz	r5, 80028c6 <__swsetup_r+0x16>
 80028bc:	69ab      	ldr	r3, [r5, #24]
 80028be:	b913      	cbnz	r3, 80028c6 <__swsetup_r+0x16>
 80028c0:	4628      	mov	r0, r5
 80028c2:	f000 f97d 	bl	8002bc0 <__sinit>
 80028c6:	4b2e      	ldr	r3, [pc, #184]	; (8002980 <__swsetup_r+0xd0>)
 80028c8:	429c      	cmp	r4, r3
 80028ca:	d10f      	bne.n	80028ec <__swsetup_r+0x3c>
 80028cc:	686c      	ldr	r4, [r5, #4]
 80028ce:	89a3      	ldrh	r3, [r4, #12]
 80028d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80028d4:	0719      	lsls	r1, r3, #28
 80028d6:	d42c      	bmi.n	8002932 <__swsetup_r+0x82>
 80028d8:	06dd      	lsls	r5, r3, #27
 80028da:	d411      	bmi.n	8002900 <__swsetup_r+0x50>
 80028dc:	2309      	movs	r3, #9
 80028de:	6033      	str	r3, [r6, #0]
 80028e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80028e4:	f04f 30ff 	mov.w	r0, #4294967295
 80028e8:	81a3      	strh	r3, [r4, #12]
 80028ea:	e03e      	b.n	800296a <__swsetup_r+0xba>
 80028ec:	4b25      	ldr	r3, [pc, #148]	; (8002984 <__swsetup_r+0xd4>)
 80028ee:	429c      	cmp	r4, r3
 80028f0:	d101      	bne.n	80028f6 <__swsetup_r+0x46>
 80028f2:	68ac      	ldr	r4, [r5, #8]
 80028f4:	e7eb      	b.n	80028ce <__swsetup_r+0x1e>
 80028f6:	4b24      	ldr	r3, [pc, #144]	; (8002988 <__swsetup_r+0xd8>)
 80028f8:	429c      	cmp	r4, r3
 80028fa:	bf08      	it	eq
 80028fc:	68ec      	ldreq	r4, [r5, #12]
 80028fe:	e7e6      	b.n	80028ce <__swsetup_r+0x1e>
 8002900:	0758      	lsls	r0, r3, #29
 8002902:	d512      	bpl.n	800292a <__swsetup_r+0x7a>
 8002904:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002906:	b141      	cbz	r1, 800291a <__swsetup_r+0x6a>
 8002908:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800290c:	4299      	cmp	r1, r3
 800290e:	d002      	beq.n	8002916 <__swsetup_r+0x66>
 8002910:	4630      	mov	r0, r6
 8002912:	f000 fa59 	bl	8002dc8 <_free_r>
 8002916:	2300      	movs	r3, #0
 8002918:	6363      	str	r3, [r4, #52]	; 0x34
 800291a:	89a3      	ldrh	r3, [r4, #12]
 800291c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002920:	81a3      	strh	r3, [r4, #12]
 8002922:	2300      	movs	r3, #0
 8002924:	6063      	str	r3, [r4, #4]
 8002926:	6923      	ldr	r3, [r4, #16]
 8002928:	6023      	str	r3, [r4, #0]
 800292a:	89a3      	ldrh	r3, [r4, #12]
 800292c:	f043 0308 	orr.w	r3, r3, #8
 8002930:	81a3      	strh	r3, [r4, #12]
 8002932:	6923      	ldr	r3, [r4, #16]
 8002934:	b94b      	cbnz	r3, 800294a <__swsetup_r+0x9a>
 8002936:	89a3      	ldrh	r3, [r4, #12]
 8002938:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800293c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002940:	d003      	beq.n	800294a <__swsetup_r+0x9a>
 8002942:	4621      	mov	r1, r4
 8002944:	4630      	mov	r0, r6
 8002946:	f000 f9ff 	bl	8002d48 <__smakebuf_r>
 800294a:	89a0      	ldrh	r0, [r4, #12]
 800294c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002950:	f010 0301 	ands.w	r3, r0, #1
 8002954:	d00a      	beq.n	800296c <__swsetup_r+0xbc>
 8002956:	2300      	movs	r3, #0
 8002958:	60a3      	str	r3, [r4, #8]
 800295a:	6963      	ldr	r3, [r4, #20]
 800295c:	425b      	negs	r3, r3
 800295e:	61a3      	str	r3, [r4, #24]
 8002960:	6923      	ldr	r3, [r4, #16]
 8002962:	b943      	cbnz	r3, 8002976 <__swsetup_r+0xc6>
 8002964:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002968:	d1ba      	bne.n	80028e0 <__swsetup_r+0x30>
 800296a:	bd70      	pop	{r4, r5, r6, pc}
 800296c:	0781      	lsls	r1, r0, #30
 800296e:	bf58      	it	pl
 8002970:	6963      	ldrpl	r3, [r4, #20]
 8002972:	60a3      	str	r3, [r4, #8]
 8002974:	e7f4      	b.n	8002960 <__swsetup_r+0xb0>
 8002976:	2000      	movs	r0, #0
 8002978:	e7f7      	b.n	800296a <__swsetup_r+0xba>
 800297a:	bf00      	nop
 800297c:	20000018 	.word	0x20000018
 8002980:	080037ec 	.word	0x080037ec
 8002984:	0800380c 	.word	0x0800380c
 8002988:	080037cc 	.word	0x080037cc

0800298c <__sflush_r>:
 800298c:	898a      	ldrh	r2, [r1, #12]
 800298e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002992:	4605      	mov	r5, r0
 8002994:	0710      	lsls	r0, r2, #28
 8002996:	460c      	mov	r4, r1
 8002998:	d458      	bmi.n	8002a4c <__sflush_r+0xc0>
 800299a:	684b      	ldr	r3, [r1, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	dc05      	bgt.n	80029ac <__sflush_r+0x20>
 80029a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	dc02      	bgt.n	80029ac <__sflush_r+0x20>
 80029a6:	2000      	movs	r0, #0
 80029a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80029ae:	2e00      	cmp	r6, #0
 80029b0:	d0f9      	beq.n	80029a6 <__sflush_r+0x1a>
 80029b2:	2300      	movs	r3, #0
 80029b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80029b8:	682f      	ldr	r7, [r5, #0]
 80029ba:	602b      	str	r3, [r5, #0]
 80029bc:	d032      	beq.n	8002a24 <__sflush_r+0x98>
 80029be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80029c0:	89a3      	ldrh	r3, [r4, #12]
 80029c2:	075a      	lsls	r2, r3, #29
 80029c4:	d505      	bpl.n	80029d2 <__sflush_r+0x46>
 80029c6:	6863      	ldr	r3, [r4, #4]
 80029c8:	1ac0      	subs	r0, r0, r3
 80029ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80029cc:	b10b      	cbz	r3, 80029d2 <__sflush_r+0x46>
 80029ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029d0:	1ac0      	subs	r0, r0, r3
 80029d2:	2300      	movs	r3, #0
 80029d4:	4602      	mov	r2, r0
 80029d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80029d8:	4628      	mov	r0, r5
 80029da:	6a21      	ldr	r1, [r4, #32]
 80029dc:	47b0      	blx	r6
 80029de:	1c43      	adds	r3, r0, #1
 80029e0:	89a3      	ldrh	r3, [r4, #12]
 80029e2:	d106      	bne.n	80029f2 <__sflush_r+0x66>
 80029e4:	6829      	ldr	r1, [r5, #0]
 80029e6:	291d      	cmp	r1, #29
 80029e8:	d82c      	bhi.n	8002a44 <__sflush_r+0xb8>
 80029ea:	4a2a      	ldr	r2, [pc, #168]	; (8002a94 <__sflush_r+0x108>)
 80029ec:	40ca      	lsrs	r2, r1
 80029ee:	07d6      	lsls	r6, r2, #31
 80029f0:	d528      	bpl.n	8002a44 <__sflush_r+0xb8>
 80029f2:	2200      	movs	r2, #0
 80029f4:	6062      	str	r2, [r4, #4]
 80029f6:	6922      	ldr	r2, [r4, #16]
 80029f8:	04d9      	lsls	r1, r3, #19
 80029fa:	6022      	str	r2, [r4, #0]
 80029fc:	d504      	bpl.n	8002a08 <__sflush_r+0x7c>
 80029fe:	1c42      	adds	r2, r0, #1
 8002a00:	d101      	bne.n	8002a06 <__sflush_r+0x7a>
 8002a02:	682b      	ldr	r3, [r5, #0]
 8002a04:	b903      	cbnz	r3, 8002a08 <__sflush_r+0x7c>
 8002a06:	6560      	str	r0, [r4, #84]	; 0x54
 8002a08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a0a:	602f      	str	r7, [r5, #0]
 8002a0c:	2900      	cmp	r1, #0
 8002a0e:	d0ca      	beq.n	80029a6 <__sflush_r+0x1a>
 8002a10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a14:	4299      	cmp	r1, r3
 8002a16:	d002      	beq.n	8002a1e <__sflush_r+0x92>
 8002a18:	4628      	mov	r0, r5
 8002a1a:	f000 f9d5 	bl	8002dc8 <_free_r>
 8002a1e:	2000      	movs	r0, #0
 8002a20:	6360      	str	r0, [r4, #52]	; 0x34
 8002a22:	e7c1      	b.n	80029a8 <__sflush_r+0x1c>
 8002a24:	6a21      	ldr	r1, [r4, #32]
 8002a26:	2301      	movs	r3, #1
 8002a28:	4628      	mov	r0, r5
 8002a2a:	47b0      	blx	r6
 8002a2c:	1c41      	adds	r1, r0, #1
 8002a2e:	d1c7      	bne.n	80029c0 <__sflush_r+0x34>
 8002a30:	682b      	ldr	r3, [r5, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0c4      	beq.n	80029c0 <__sflush_r+0x34>
 8002a36:	2b1d      	cmp	r3, #29
 8002a38:	d001      	beq.n	8002a3e <__sflush_r+0xb2>
 8002a3a:	2b16      	cmp	r3, #22
 8002a3c:	d101      	bne.n	8002a42 <__sflush_r+0xb6>
 8002a3e:	602f      	str	r7, [r5, #0]
 8002a40:	e7b1      	b.n	80029a6 <__sflush_r+0x1a>
 8002a42:	89a3      	ldrh	r3, [r4, #12]
 8002a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a48:	81a3      	strh	r3, [r4, #12]
 8002a4a:	e7ad      	b.n	80029a8 <__sflush_r+0x1c>
 8002a4c:	690f      	ldr	r7, [r1, #16]
 8002a4e:	2f00      	cmp	r7, #0
 8002a50:	d0a9      	beq.n	80029a6 <__sflush_r+0x1a>
 8002a52:	0793      	lsls	r3, r2, #30
 8002a54:	bf18      	it	ne
 8002a56:	2300      	movne	r3, #0
 8002a58:	680e      	ldr	r6, [r1, #0]
 8002a5a:	bf08      	it	eq
 8002a5c:	694b      	ldreq	r3, [r1, #20]
 8002a5e:	eba6 0807 	sub.w	r8, r6, r7
 8002a62:	600f      	str	r7, [r1, #0]
 8002a64:	608b      	str	r3, [r1, #8]
 8002a66:	f1b8 0f00 	cmp.w	r8, #0
 8002a6a:	dd9c      	ble.n	80029a6 <__sflush_r+0x1a>
 8002a6c:	4643      	mov	r3, r8
 8002a6e:	463a      	mov	r2, r7
 8002a70:	4628      	mov	r0, r5
 8002a72:	6a21      	ldr	r1, [r4, #32]
 8002a74:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002a76:	47b0      	blx	r6
 8002a78:	2800      	cmp	r0, #0
 8002a7a:	dc06      	bgt.n	8002a8a <__sflush_r+0xfe>
 8002a7c:	89a3      	ldrh	r3, [r4, #12]
 8002a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a86:	81a3      	strh	r3, [r4, #12]
 8002a88:	e78e      	b.n	80029a8 <__sflush_r+0x1c>
 8002a8a:	4407      	add	r7, r0
 8002a8c:	eba8 0800 	sub.w	r8, r8, r0
 8002a90:	e7e9      	b.n	8002a66 <__sflush_r+0xda>
 8002a92:	bf00      	nop
 8002a94:	20400001 	.word	0x20400001

08002a98 <_fflush_r>:
 8002a98:	b538      	push	{r3, r4, r5, lr}
 8002a9a:	690b      	ldr	r3, [r1, #16]
 8002a9c:	4605      	mov	r5, r0
 8002a9e:	460c      	mov	r4, r1
 8002aa0:	b913      	cbnz	r3, 8002aa8 <_fflush_r+0x10>
 8002aa2:	2500      	movs	r5, #0
 8002aa4:	4628      	mov	r0, r5
 8002aa6:	bd38      	pop	{r3, r4, r5, pc}
 8002aa8:	b118      	cbz	r0, 8002ab2 <_fflush_r+0x1a>
 8002aaa:	6983      	ldr	r3, [r0, #24]
 8002aac:	b90b      	cbnz	r3, 8002ab2 <_fflush_r+0x1a>
 8002aae:	f000 f887 	bl	8002bc0 <__sinit>
 8002ab2:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <_fflush_r+0x6c>)
 8002ab4:	429c      	cmp	r4, r3
 8002ab6:	d11b      	bne.n	8002af0 <_fflush_r+0x58>
 8002ab8:	686c      	ldr	r4, [r5, #4]
 8002aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0ef      	beq.n	8002aa2 <_fflush_r+0xa>
 8002ac2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002ac4:	07d0      	lsls	r0, r2, #31
 8002ac6:	d404      	bmi.n	8002ad2 <_fflush_r+0x3a>
 8002ac8:	0599      	lsls	r1, r3, #22
 8002aca:	d402      	bmi.n	8002ad2 <_fflush_r+0x3a>
 8002acc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ace:	f000 f915 	bl	8002cfc <__retarget_lock_acquire_recursive>
 8002ad2:	4628      	mov	r0, r5
 8002ad4:	4621      	mov	r1, r4
 8002ad6:	f7ff ff59 	bl	800298c <__sflush_r>
 8002ada:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002adc:	4605      	mov	r5, r0
 8002ade:	07da      	lsls	r2, r3, #31
 8002ae0:	d4e0      	bmi.n	8002aa4 <_fflush_r+0xc>
 8002ae2:	89a3      	ldrh	r3, [r4, #12]
 8002ae4:	059b      	lsls	r3, r3, #22
 8002ae6:	d4dd      	bmi.n	8002aa4 <_fflush_r+0xc>
 8002ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002aea:	f000 f908 	bl	8002cfe <__retarget_lock_release_recursive>
 8002aee:	e7d9      	b.n	8002aa4 <_fflush_r+0xc>
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <_fflush_r+0x70>)
 8002af2:	429c      	cmp	r4, r3
 8002af4:	d101      	bne.n	8002afa <_fflush_r+0x62>
 8002af6:	68ac      	ldr	r4, [r5, #8]
 8002af8:	e7df      	b.n	8002aba <_fflush_r+0x22>
 8002afa:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <_fflush_r+0x74>)
 8002afc:	429c      	cmp	r4, r3
 8002afe:	bf08      	it	eq
 8002b00:	68ec      	ldreq	r4, [r5, #12]
 8002b02:	e7da      	b.n	8002aba <_fflush_r+0x22>
 8002b04:	080037ec 	.word	0x080037ec
 8002b08:	0800380c 	.word	0x0800380c
 8002b0c:	080037cc 	.word	0x080037cc

08002b10 <std>:
 8002b10:	2300      	movs	r3, #0
 8002b12:	b510      	push	{r4, lr}
 8002b14:	4604      	mov	r4, r0
 8002b16:	e9c0 3300 	strd	r3, r3, [r0]
 8002b1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b1e:	6083      	str	r3, [r0, #8]
 8002b20:	8181      	strh	r1, [r0, #12]
 8002b22:	6643      	str	r3, [r0, #100]	; 0x64
 8002b24:	81c2      	strh	r2, [r0, #14]
 8002b26:	6183      	str	r3, [r0, #24]
 8002b28:	4619      	mov	r1, r3
 8002b2a:	2208      	movs	r2, #8
 8002b2c:	305c      	adds	r0, #92	; 0x5c
 8002b2e:	f7ff fdd7 	bl	80026e0 <memset>
 8002b32:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <std+0x38>)
 8002b34:	6224      	str	r4, [r4, #32]
 8002b36:	6263      	str	r3, [r4, #36]	; 0x24
 8002b38:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <std+0x3c>)
 8002b3a:	62a3      	str	r3, [r4, #40]	; 0x28
 8002b3c:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <std+0x40>)
 8002b3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b40:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <std+0x44>)
 8002b42:	6323      	str	r3, [r4, #48]	; 0x30
 8002b44:	bd10      	pop	{r4, pc}
 8002b46:	bf00      	nop
 8002b48:	08003511 	.word	0x08003511
 8002b4c:	08003533 	.word	0x08003533
 8002b50:	0800356b 	.word	0x0800356b
 8002b54:	0800358f 	.word	0x0800358f

08002b58 <_cleanup_r>:
 8002b58:	4901      	ldr	r1, [pc, #4]	; (8002b60 <_cleanup_r+0x8>)
 8002b5a:	f000 b8af 	b.w	8002cbc <_fwalk_reent>
 8002b5e:	bf00      	nop
 8002b60:	08002a99 	.word	0x08002a99

08002b64 <__sfmoreglue>:
 8002b64:	b570      	push	{r4, r5, r6, lr}
 8002b66:	2568      	movs	r5, #104	; 0x68
 8002b68:	1e4a      	subs	r2, r1, #1
 8002b6a:	4355      	muls	r5, r2
 8002b6c:	460e      	mov	r6, r1
 8002b6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002b72:	f000 f975 	bl	8002e60 <_malloc_r>
 8002b76:	4604      	mov	r4, r0
 8002b78:	b140      	cbz	r0, 8002b8c <__sfmoreglue+0x28>
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	e9c0 1600 	strd	r1, r6, [r0]
 8002b80:	300c      	adds	r0, #12
 8002b82:	60a0      	str	r0, [r4, #8]
 8002b84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002b88:	f7ff fdaa 	bl	80026e0 <memset>
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	bd70      	pop	{r4, r5, r6, pc}

08002b90 <__sfp_lock_acquire>:
 8002b90:	4801      	ldr	r0, [pc, #4]	; (8002b98 <__sfp_lock_acquire+0x8>)
 8002b92:	f000 b8b3 	b.w	8002cfc <__retarget_lock_acquire_recursive>
 8002b96:	bf00      	nop
 8002b98:	200001f0 	.word	0x200001f0

08002b9c <__sfp_lock_release>:
 8002b9c:	4801      	ldr	r0, [pc, #4]	; (8002ba4 <__sfp_lock_release+0x8>)
 8002b9e:	f000 b8ae 	b.w	8002cfe <__retarget_lock_release_recursive>
 8002ba2:	bf00      	nop
 8002ba4:	200001f0 	.word	0x200001f0

08002ba8 <__sinit_lock_acquire>:
 8002ba8:	4801      	ldr	r0, [pc, #4]	; (8002bb0 <__sinit_lock_acquire+0x8>)
 8002baa:	f000 b8a7 	b.w	8002cfc <__retarget_lock_acquire_recursive>
 8002bae:	bf00      	nop
 8002bb0:	200001eb 	.word	0x200001eb

08002bb4 <__sinit_lock_release>:
 8002bb4:	4801      	ldr	r0, [pc, #4]	; (8002bbc <__sinit_lock_release+0x8>)
 8002bb6:	f000 b8a2 	b.w	8002cfe <__retarget_lock_release_recursive>
 8002bba:	bf00      	nop
 8002bbc:	200001eb 	.word	0x200001eb

08002bc0 <__sinit>:
 8002bc0:	b510      	push	{r4, lr}
 8002bc2:	4604      	mov	r4, r0
 8002bc4:	f7ff fff0 	bl	8002ba8 <__sinit_lock_acquire>
 8002bc8:	69a3      	ldr	r3, [r4, #24]
 8002bca:	b11b      	cbz	r3, 8002bd4 <__sinit+0x14>
 8002bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bd0:	f7ff bff0 	b.w	8002bb4 <__sinit_lock_release>
 8002bd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002bd8:	6523      	str	r3, [r4, #80]	; 0x50
 8002bda:	4b13      	ldr	r3, [pc, #76]	; (8002c28 <__sinit+0x68>)
 8002bdc:	4a13      	ldr	r2, [pc, #76]	; (8002c2c <__sinit+0x6c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	62a2      	str	r2, [r4, #40]	; 0x28
 8002be2:	42a3      	cmp	r3, r4
 8002be4:	bf08      	it	eq
 8002be6:	2301      	moveq	r3, #1
 8002be8:	4620      	mov	r0, r4
 8002bea:	bf08      	it	eq
 8002bec:	61a3      	streq	r3, [r4, #24]
 8002bee:	f000 f81f 	bl	8002c30 <__sfp>
 8002bf2:	6060      	str	r0, [r4, #4]
 8002bf4:	4620      	mov	r0, r4
 8002bf6:	f000 f81b 	bl	8002c30 <__sfp>
 8002bfa:	60a0      	str	r0, [r4, #8]
 8002bfc:	4620      	mov	r0, r4
 8002bfe:	f000 f817 	bl	8002c30 <__sfp>
 8002c02:	2200      	movs	r2, #0
 8002c04:	2104      	movs	r1, #4
 8002c06:	60e0      	str	r0, [r4, #12]
 8002c08:	6860      	ldr	r0, [r4, #4]
 8002c0a:	f7ff ff81 	bl	8002b10 <std>
 8002c0e:	2201      	movs	r2, #1
 8002c10:	2109      	movs	r1, #9
 8002c12:	68a0      	ldr	r0, [r4, #8]
 8002c14:	f7ff ff7c 	bl	8002b10 <std>
 8002c18:	2202      	movs	r2, #2
 8002c1a:	2112      	movs	r1, #18
 8002c1c:	68e0      	ldr	r0, [r4, #12]
 8002c1e:	f7ff ff77 	bl	8002b10 <std>
 8002c22:	2301      	movs	r3, #1
 8002c24:	61a3      	str	r3, [r4, #24]
 8002c26:	e7d1      	b.n	8002bcc <__sinit+0xc>
 8002c28:	080037c8 	.word	0x080037c8
 8002c2c:	08002b59 	.word	0x08002b59

08002c30 <__sfp>:
 8002c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c32:	4607      	mov	r7, r0
 8002c34:	f7ff ffac 	bl	8002b90 <__sfp_lock_acquire>
 8002c38:	4b1e      	ldr	r3, [pc, #120]	; (8002cb4 <__sfp+0x84>)
 8002c3a:	681e      	ldr	r6, [r3, #0]
 8002c3c:	69b3      	ldr	r3, [r6, #24]
 8002c3e:	b913      	cbnz	r3, 8002c46 <__sfp+0x16>
 8002c40:	4630      	mov	r0, r6
 8002c42:	f7ff ffbd 	bl	8002bc0 <__sinit>
 8002c46:	3648      	adds	r6, #72	; 0x48
 8002c48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	d503      	bpl.n	8002c58 <__sfp+0x28>
 8002c50:	6833      	ldr	r3, [r6, #0]
 8002c52:	b30b      	cbz	r3, 8002c98 <__sfp+0x68>
 8002c54:	6836      	ldr	r6, [r6, #0]
 8002c56:	e7f7      	b.n	8002c48 <__sfp+0x18>
 8002c58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002c5c:	b9d5      	cbnz	r5, 8002c94 <__sfp+0x64>
 8002c5e:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <__sfp+0x88>)
 8002c60:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002c64:	60e3      	str	r3, [r4, #12]
 8002c66:	6665      	str	r5, [r4, #100]	; 0x64
 8002c68:	f000 f847 	bl	8002cfa <__retarget_lock_init_recursive>
 8002c6c:	f7ff ff96 	bl	8002b9c <__sfp_lock_release>
 8002c70:	2208      	movs	r2, #8
 8002c72:	4629      	mov	r1, r5
 8002c74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002c78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002c7c:	6025      	str	r5, [r4, #0]
 8002c7e:	61a5      	str	r5, [r4, #24]
 8002c80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002c84:	f7ff fd2c 	bl	80026e0 <memset>
 8002c88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002c8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002c90:	4620      	mov	r0, r4
 8002c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c94:	3468      	adds	r4, #104	; 0x68
 8002c96:	e7d9      	b.n	8002c4c <__sfp+0x1c>
 8002c98:	2104      	movs	r1, #4
 8002c9a:	4638      	mov	r0, r7
 8002c9c:	f7ff ff62 	bl	8002b64 <__sfmoreglue>
 8002ca0:	4604      	mov	r4, r0
 8002ca2:	6030      	str	r0, [r6, #0]
 8002ca4:	2800      	cmp	r0, #0
 8002ca6:	d1d5      	bne.n	8002c54 <__sfp+0x24>
 8002ca8:	f7ff ff78 	bl	8002b9c <__sfp_lock_release>
 8002cac:	230c      	movs	r3, #12
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	e7ee      	b.n	8002c90 <__sfp+0x60>
 8002cb2:	bf00      	nop
 8002cb4:	080037c8 	.word	0x080037c8
 8002cb8:	ffff0001 	.word	0xffff0001

08002cbc <_fwalk_reent>:
 8002cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cc0:	4606      	mov	r6, r0
 8002cc2:	4688      	mov	r8, r1
 8002cc4:	2700      	movs	r7, #0
 8002cc6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002cca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002cce:	f1b9 0901 	subs.w	r9, r9, #1
 8002cd2:	d505      	bpl.n	8002ce0 <_fwalk_reent+0x24>
 8002cd4:	6824      	ldr	r4, [r4, #0]
 8002cd6:	2c00      	cmp	r4, #0
 8002cd8:	d1f7      	bne.n	8002cca <_fwalk_reent+0xe>
 8002cda:	4638      	mov	r0, r7
 8002cdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ce0:	89ab      	ldrh	r3, [r5, #12]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d907      	bls.n	8002cf6 <_fwalk_reent+0x3a>
 8002ce6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002cea:	3301      	adds	r3, #1
 8002cec:	d003      	beq.n	8002cf6 <_fwalk_reent+0x3a>
 8002cee:	4629      	mov	r1, r5
 8002cf0:	4630      	mov	r0, r6
 8002cf2:	47c0      	blx	r8
 8002cf4:	4307      	orrs	r7, r0
 8002cf6:	3568      	adds	r5, #104	; 0x68
 8002cf8:	e7e9      	b.n	8002cce <_fwalk_reent+0x12>

08002cfa <__retarget_lock_init_recursive>:
 8002cfa:	4770      	bx	lr

08002cfc <__retarget_lock_acquire_recursive>:
 8002cfc:	4770      	bx	lr

08002cfe <__retarget_lock_release_recursive>:
 8002cfe:	4770      	bx	lr

08002d00 <__swhatbuf_r>:
 8002d00:	b570      	push	{r4, r5, r6, lr}
 8002d02:	460e      	mov	r6, r1
 8002d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d08:	4614      	mov	r4, r2
 8002d0a:	2900      	cmp	r1, #0
 8002d0c:	461d      	mov	r5, r3
 8002d0e:	b096      	sub	sp, #88	; 0x58
 8002d10:	da07      	bge.n	8002d22 <__swhatbuf_r+0x22>
 8002d12:	2300      	movs	r3, #0
 8002d14:	602b      	str	r3, [r5, #0]
 8002d16:	89b3      	ldrh	r3, [r6, #12]
 8002d18:	061a      	lsls	r2, r3, #24
 8002d1a:	d410      	bmi.n	8002d3e <__swhatbuf_r+0x3e>
 8002d1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d20:	e00e      	b.n	8002d40 <__swhatbuf_r+0x40>
 8002d22:	466a      	mov	r2, sp
 8002d24:	f000 fc5a 	bl	80035dc <_fstat_r>
 8002d28:	2800      	cmp	r0, #0
 8002d2a:	dbf2      	blt.n	8002d12 <__swhatbuf_r+0x12>
 8002d2c:	9a01      	ldr	r2, [sp, #4]
 8002d2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002d32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002d36:	425a      	negs	r2, r3
 8002d38:	415a      	adcs	r2, r3
 8002d3a:	602a      	str	r2, [r5, #0]
 8002d3c:	e7ee      	b.n	8002d1c <__swhatbuf_r+0x1c>
 8002d3e:	2340      	movs	r3, #64	; 0x40
 8002d40:	2000      	movs	r0, #0
 8002d42:	6023      	str	r3, [r4, #0]
 8002d44:	b016      	add	sp, #88	; 0x58
 8002d46:	bd70      	pop	{r4, r5, r6, pc}

08002d48 <__smakebuf_r>:
 8002d48:	898b      	ldrh	r3, [r1, #12]
 8002d4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002d4c:	079d      	lsls	r5, r3, #30
 8002d4e:	4606      	mov	r6, r0
 8002d50:	460c      	mov	r4, r1
 8002d52:	d507      	bpl.n	8002d64 <__smakebuf_r+0x1c>
 8002d54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002d58:	6023      	str	r3, [r4, #0]
 8002d5a:	6123      	str	r3, [r4, #16]
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	6163      	str	r3, [r4, #20]
 8002d60:	b002      	add	sp, #8
 8002d62:	bd70      	pop	{r4, r5, r6, pc}
 8002d64:	466a      	mov	r2, sp
 8002d66:	ab01      	add	r3, sp, #4
 8002d68:	f7ff ffca 	bl	8002d00 <__swhatbuf_r>
 8002d6c:	9900      	ldr	r1, [sp, #0]
 8002d6e:	4605      	mov	r5, r0
 8002d70:	4630      	mov	r0, r6
 8002d72:	f000 f875 	bl	8002e60 <_malloc_r>
 8002d76:	b948      	cbnz	r0, 8002d8c <__smakebuf_r+0x44>
 8002d78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d7c:	059a      	lsls	r2, r3, #22
 8002d7e:	d4ef      	bmi.n	8002d60 <__smakebuf_r+0x18>
 8002d80:	f023 0303 	bic.w	r3, r3, #3
 8002d84:	f043 0302 	orr.w	r3, r3, #2
 8002d88:	81a3      	strh	r3, [r4, #12]
 8002d8a:	e7e3      	b.n	8002d54 <__smakebuf_r+0xc>
 8002d8c:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <__smakebuf_r+0x7c>)
 8002d8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002d90:	89a3      	ldrh	r3, [r4, #12]
 8002d92:	6020      	str	r0, [r4, #0]
 8002d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d98:	81a3      	strh	r3, [r4, #12]
 8002d9a:	9b00      	ldr	r3, [sp, #0]
 8002d9c:	6120      	str	r0, [r4, #16]
 8002d9e:	6163      	str	r3, [r4, #20]
 8002da0:	9b01      	ldr	r3, [sp, #4]
 8002da2:	b15b      	cbz	r3, 8002dbc <__smakebuf_r+0x74>
 8002da4:	4630      	mov	r0, r6
 8002da6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002daa:	f000 fc29 	bl	8003600 <_isatty_r>
 8002dae:	b128      	cbz	r0, 8002dbc <__smakebuf_r+0x74>
 8002db0:	89a3      	ldrh	r3, [r4, #12]
 8002db2:	f023 0303 	bic.w	r3, r3, #3
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	81a3      	strh	r3, [r4, #12]
 8002dbc:	89a0      	ldrh	r0, [r4, #12]
 8002dbe:	4305      	orrs	r5, r0
 8002dc0:	81a5      	strh	r5, [r4, #12]
 8002dc2:	e7cd      	b.n	8002d60 <__smakebuf_r+0x18>
 8002dc4:	08002b59 	.word	0x08002b59

08002dc8 <_free_r>:
 8002dc8:	b538      	push	{r3, r4, r5, lr}
 8002dca:	4605      	mov	r5, r0
 8002dcc:	2900      	cmp	r1, #0
 8002dce:	d043      	beq.n	8002e58 <_free_r+0x90>
 8002dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dd4:	1f0c      	subs	r4, r1, #4
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	bfb8      	it	lt
 8002dda:	18e4      	addlt	r4, r4, r3
 8002ddc:	f000 fc40 	bl	8003660 <__malloc_lock>
 8002de0:	4a1e      	ldr	r2, [pc, #120]	; (8002e5c <_free_r+0x94>)
 8002de2:	6813      	ldr	r3, [r2, #0]
 8002de4:	4610      	mov	r0, r2
 8002de6:	b933      	cbnz	r3, 8002df6 <_free_r+0x2e>
 8002de8:	6063      	str	r3, [r4, #4]
 8002dea:	6014      	str	r4, [r2, #0]
 8002dec:	4628      	mov	r0, r5
 8002dee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002df2:	f000 bc3b 	b.w	800366c <__malloc_unlock>
 8002df6:	42a3      	cmp	r3, r4
 8002df8:	d90a      	bls.n	8002e10 <_free_r+0x48>
 8002dfa:	6821      	ldr	r1, [r4, #0]
 8002dfc:	1862      	adds	r2, r4, r1
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	bf01      	itttt	eq
 8002e02:	681a      	ldreq	r2, [r3, #0]
 8002e04:	685b      	ldreq	r3, [r3, #4]
 8002e06:	1852      	addeq	r2, r2, r1
 8002e08:	6022      	streq	r2, [r4, #0]
 8002e0a:	6063      	str	r3, [r4, #4]
 8002e0c:	6004      	str	r4, [r0, #0]
 8002e0e:	e7ed      	b.n	8002dec <_free_r+0x24>
 8002e10:	461a      	mov	r2, r3
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	b10b      	cbz	r3, 8002e1a <_free_r+0x52>
 8002e16:	42a3      	cmp	r3, r4
 8002e18:	d9fa      	bls.n	8002e10 <_free_r+0x48>
 8002e1a:	6811      	ldr	r1, [r2, #0]
 8002e1c:	1850      	adds	r0, r2, r1
 8002e1e:	42a0      	cmp	r0, r4
 8002e20:	d10b      	bne.n	8002e3a <_free_r+0x72>
 8002e22:	6820      	ldr	r0, [r4, #0]
 8002e24:	4401      	add	r1, r0
 8002e26:	1850      	adds	r0, r2, r1
 8002e28:	4283      	cmp	r3, r0
 8002e2a:	6011      	str	r1, [r2, #0]
 8002e2c:	d1de      	bne.n	8002dec <_free_r+0x24>
 8002e2e:	6818      	ldr	r0, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	4401      	add	r1, r0
 8002e34:	6011      	str	r1, [r2, #0]
 8002e36:	6053      	str	r3, [r2, #4]
 8002e38:	e7d8      	b.n	8002dec <_free_r+0x24>
 8002e3a:	d902      	bls.n	8002e42 <_free_r+0x7a>
 8002e3c:	230c      	movs	r3, #12
 8002e3e:	602b      	str	r3, [r5, #0]
 8002e40:	e7d4      	b.n	8002dec <_free_r+0x24>
 8002e42:	6820      	ldr	r0, [r4, #0]
 8002e44:	1821      	adds	r1, r4, r0
 8002e46:	428b      	cmp	r3, r1
 8002e48:	bf01      	itttt	eq
 8002e4a:	6819      	ldreq	r1, [r3, #0]
 8002e4c:	685b      	ldreq	r3, [r3, #4]
 8002e4e:	1809      	addeq	r1, r1, r0
 8002e50:	6021      	streq	r1, [r4, #0]
 8002e52:	6063      	str	r3, [r4, #4]
 8002e54:	6054      	str	r4, [r2, #4]
 8002e56:	e7c9      	b.n	8002dec <_free_r+0x24>
 8002e58:	bd38      	pop	{r3, r4, r5, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000144 	.word	0x20000144

08002e60 <_malloc_r>:
 8002e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e62:	1ccd      	adds	r5, r1, #3
 8002e64:	f025 0503 	bic.w	r5, r5, #3
 8002e68:	3508      	adds	r5, #8
 8002e6a:	2d0c      	cmp	r5, #12
 8002e6c:	bf38      	it	cc
 8002e6e:	250c      	movcc	r5, #12
 8002e70:	2d00      	cmp	r5, #0
 8002e72:	4606      	mov	r6, r0
 8002e74:	db01      	blt.n	8002e7a <_malloc_r+0x1a>
 8002e76:	42a9      	cmp	r1, r5
 8002e78:	d903      	bls.n	8002e82 <_malloc_r+0x22>
 8002e7a:	230c      	movs	r3, #12
 8002e7c:	6033      	str	r3, [r6, #0]
 8002e7e:	2000      	movs	r0, #0
 8002e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e82:	f000 fbed 	bl	8003660 <__malloc_lock>
 8002e86:	4921      	ldr	r1, [pc, #132]	; (8002f0c <_malloc_r+0xac>)
 8002e88:	680a      	ldr	r2, [r1, #0]
 8002e8a:	4614      	mov	r4, r2
 8002e8c:	b99c      	cbnz	r4, 8002eb6 <_malloc_r+0x56>
 8002e8e:	4f20      	ldr	r7, [pc, #128]	; (8002f10 <_malloc_r+0xb0>)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	b923      	cbnz	r3, 8002e9e <_malloc_r+0x3e>
 8002e94:	4621      	mov	r1, r4
 8002e96:	4630      	mov	r0, r6
 8002e98:	f000 fb2a 	bl	80034f0 <_sbrk_r>
 8002e9c:	6038      	str	r0, [r7, #0]
 8002e9e:	4629      	mov	r1, r5
 8002ea0:	4630      	mov	r0, r6
 8002ea2:	f000 fb25 	bl	80034f0 <_sbrk_r>
 8002ea6:	1c43      	adds	r3, r0, #1
 8002ea8:	d123      	bne.n	8002ef2 <_malloc_r+0x92>
 8002eaa:	230c      	movs	r3, #12
 8002eac:	4630      	mov	r0, r6
 8002eae:	6033      	str	r3, [r6, #0]
 8002eb0:	f000 fbdc 	bl	800366c <__malloc_unlock>
 8002eb4:	e7e3      	b.n	8002e7e <_malloc_r+0x1e>
 8002eb6:	6823      	ldr	r3, [r4, #0]
 8002eb8:	1b5b      	subs	r3, r3, r5
 8002eba:	d417      	bmi.n	8002eec <_malloc_r+0x8c>
 8002ebc:	2b0b      	cmp	r3, #11
 8002ebe:	d903      	bls.n	8002ec8 <_malloc_r+0x68>
 8002ec0:	6023      	str	r3, [r4, #0]
 8002ec2:	441c      	add	r4, r3
 8002ec4:	6025      	str	r5, [r4, #0]
 8002ec6:	e004      	b.n	8002ed2 <_malloc_r+0x72>
 8002ec8:	6863      	ldr	r3, [r4, #4]
 8002eca:	42a2      	cmp	r2, r4
 8002ecc:	bf0c      	ite	eq
 8002ece:	600b      	streq	r3, [r1, #0]
 8002ed0:	6053      	strne	r3, [r2, #4]
 8002ed2:	4630      	mov	r0, r6
 8002ed4:	f000 fbca 	bl	800366c <__malloc_unlock>
 8002ed8:	f104 000b 	add.w	r0, r4, #11
 8002edc:	1d23      	adds	r3, r4, #4
 8002ede:	f020 0007 	bic.w	r0, r0, #7
 8002ee2:	1ac2      	subs	r2, r0, r3
 8002ee4:	d0cc      	beq.n	8002e80 <_malloc_r+0x20>
 8002ee6:	1a1b      	subs	r3, r3, r0
 8002ee8:	50a3      	str	r3, [r4, r2]
 8002eea:	e7c9      	b.n	8002e80 <_malloc_r+0x20>
 8002eec:	4622      	mov	r2, r4
 8002eee:	6864      	ldr	r4, [r4, #4]
 8002ef0:	e7cc      	b.n	8002e8c <_malloc_r+0x2c>
 8002ef2:	1cc4      	adds	r4, r0, #3
 8002ef4:	f024 0403 	bic.w	r4, r4, #3
 8002ef8:	42a0      	cmp	r0, r4
 8002efa:	d0e3      	beq.n	8002ec4 <_malloc_r+0x64>
 8002efc:	1a21      	subs	r1, r4, r0
 8002efe:	4630      	mov	r0, r6
 8002f00:	f000 faf6 	bl	80034f0 <_sbrk_r>
 8002f04:	3001      	adds	r0, #1
 8002f06:	d1dd      	bne.n	8002ec4 <_malloc_r+0x64>
 8002f08:	e7cf      	b.n	8002eaa <_malloc_r+0x4a>
 8002f0a:	bf00      	nop
 8002f0c:	20000144 	.word	0x20000144
 8002f10:	20000148 	.word	0x20000148

08002f14 <__sfputc_r>:
 8002f14:	6893      	ldr	r3, [r2, #8]
 8002f16:	b410      	push	{r4}
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	6093      	str	r3, [r2, #8]
 8002f1e:	da07      	bge.n	8002f30 <__sfputc_r+0x1c>
 8002f20:	6994      	ldr	r4, [r2, #24]
 8002f22:	42a3      	cmp	r3, r4
 8002f24:	db01      	blt.n	8002f2a <__sfputc_r+0x16>
 8002f26:	290a      	cmp	r1, #10
 8002f28:	d102      	bne.n	8002f30 <__sfputc_r+0x1c>
 8002f2a:	bc10      	pop	{r4}
 8002f2c:	f7ff bc6e 	b.w	800280c <__swbuf_r>
 8002f30:	6813      	ldr	r3, [r2, #0]
 8002f32:	1c58      	adds	r0, r3, #1
 8002f34:	6010      	str	r0, [r2, #0]
 8002f36:	7019      	strb	r1, [r3, #0]
 8002f38:	4608      	mov	r0, r1
 8002f3a:	bc10      	pop	{r4}
 8002f3c:	4770      	bx	lr

08002f3e <__sfputs_r>:
 8002f3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f40:	4606      	mov	r6, r0
 8002f42:	460f      	mov	r7, r1
 8002f44:	4614      	mov	r4, r2
 8002f46:	18d5      	adds	r5, r2, r3
 8002f48:	42ac      	cmp	r4, r5
 8002f4a:	d101      	bne.n	8002f50 <__sfputs_r+0x12>
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	e007      	b.n	8002f60 <__sfputs_r+0x22>
 8002f50:	463a      	mov	r2, r7
 8002f52:	4630      	mov	r0, r6
 8002f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f58:	f7ff ffdc 	bl	8002f14 <__sfputc_r>
 8002f5c:	1c43      	adds	r3, r0, #1
 8002f5e:	d1f3      	bne.n	8002f48 <__sfputs_r+0xa>
 8002f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002f64 <_vfiprintf_r>:
 8002f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f68:	460d      	mov	r5, r1
 8002f6a:	4614      	mov	r4, r2
 8002f6c:	4698      	mov	r8, r3
 8002f6e:	4606      	mov	r6, r0
 8002f70:	b09d      	sub	sp, #116	; 0x74
 8002f72:	b118      	cbz	r0, 8002f7c <_vfiprintf_r+0x18>
 8002f74:	6983      	ldr	r3, [r0, #24]
 8002f76:	b90b      	cbnz	r3, 8002f7c <_vfiprintf_r+0x18>
 8002f78:	f7ff fe22 	bl	8002bc0 <__sinit>
 8002f7c:	4b89      	ldr	r3, [pc, #548]	; (80031a4 <_vfiprintf_r+0x240>)
 8002f7e:	429d      	cmp	r5, r3
 8002f80:	d11b      	bne.n	8002fba <_vfiprintf_r+0x56>
 8002f82:	6875      	ldr	r5, [r6, #4]
 8002f84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f86:	07d9      	lsls	r1, r3, #31
 8002f88:	d405      	bmi.n	8002f96 <_vfiprintf_r+0x32>
 8002f8a:	89ab      	ldrh	r3, [r5, #12]
 8002f8c:	059a      	lsls	r2, r3, #22
 8002f8e:	d402      	bmi.n	8002f96 <_vfiprintf_r+0x32>
 8002f90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f92:	f7ff feb3 	bl	8002cfc <__retarget_lock_acquire_recursive>
 8002f96:	89ab      	ldrh	r3, [r5, #12]
 8002f98:	071b      	lsls	r3, r3, #28
 8002f9a:	d501      	bpl.n	8002fa0 <_vfiprintf_r+0x3c>
 8002f9c:	692b      	ldr	r3, [r5, #16]
 8002f9e:	b9eb      	cbnz	r3, 8002fdc <_vfiprintf_r+0x78>
 8002fa0:	4629      	mov	r1, r5
 8002fa2:	4630      	mov	r0, r6
 8002fa4:	f7ff fc84 	bl	80028b0 <__swsetup_r>
 8002fa8:	b1c0      	cbz	r0, 8002fdc <_vfiprintf_r+0x78>
 8002faa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002fac:	07dc      	lsls	r4, r3, #31
 8002fae:	d50e      	bpl.n	8002fce <_vfiprintf_r+0x6a>
 8002fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb4:	b01d      	add	sp, #116	; 0x74
 8002fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fba:	4b7b      	ldr	r3, [pc, #492]	; (80031a8 <_vfiprintf_r+0x244>)
 8002fbc:	429d      	cmp	r5, r3
 8002fbe:	d101      	bne.n	8002fc4 <_vfiprintf_r+0x60>
 8002fc0:	68b5      	ldr	r5, [r6, #8]
 8002fc2:	e7df      	b.n	8002f84 <_vfiprintf_r+0x20>
 8002fc4:	4b79      	ldr	r3, [pc, #484]	; (80031ac <_vfiprintf_r+0x248>)
 8002fc6:	429d      	cmp	r5, r3
 8002fc8:	bf08      	it	eq
 8002fca:	68f5      	ldreq	r5, [r6, #12]
 8002fcc:	e7da      	b.n	8002f84 <_vfiprintf_r+0x20>
 8002fce:	89ab      	ldrh	r3, [r5, #12]
 8002fd0:	0598      	lsls	r0, r3, #22
 8002fd2:	d4ed      	bmi.n	8002fb0 <_vfiprintf_r+0x4c>
 8002fd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002fd6:	f7ff fe92 	bl	8002cfe <__retarget_lock_release_recursive>
 8002fda:	e7e9      	b.n	8002fb0 <_vfiprintf_r+0x4c>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	9309      	str	r3, [sp, #36]	; 0x24
 8002fe0:	2320      	movs	r3, #32
 8002fe2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002fe6:	2330      	movs	r3, #48	; 0x30
 8002fe8:	f04f 0901 	mov.w	r9, #1
 8002fec:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ff0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80031b0 <_vfiprintf_r+0x24c>
 8002ff4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ff8:	4623      	mov	r3, r4
 8002ffa:	469a      	mov	sl, r3
 8002ffc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003000:	b10a      	cbz	r2, 8003006 <_vfiprintf_r+0xa2>
 8003002:	2a25      	cmp	r2, #37	; 0x25
 8003004:	d1f9      	bne.n	8002ffa <_vfiprintf_r+0x96>
 8003006:	ebba 0b04 	subs.w	fp, sl, r4
 800300a:	d00b      	beq.n	8003024 <_vfiprintf_r+0xc0>
 800300c:	465b      	mov	r3, fp
 800300e:	4622      	mov	r2, r4
 8003010:	4629      	mov	r1, r5
 8003012:	4630      	mov	r0, r6
 8003014:	f7ff ff93 	bl	8002f3e <__sfputs_r>
 8003018:	3001      	adds	r0, #1
 800301a:	f000 80aa 	beq.w	8003172 <_vfiprintf_r+0x20e>
 800301e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003020:	445a      	add	r2, fp
 8003022:	9209      	str	r2, [sp, #36]	; 0x24
 8003024:	f89a 3000 	ldrb.w	r3, [sl]
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 80a2 	beq.w	8003172 <_vfiprintf_r+0x20e>
 800302e:	2300      	movs	r3, #0
 8003030:	f04f 32ff 	mov.w	r2, #4294967295
 8003034:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003038:	f10a 0a01 	add.w	sl, sl, #1
 800303c:	9304      	str	r3, [sp, #16]
 800303e:	9307      	str	r3, [sp, #28]
 8003040:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003044:	931a      	str	r3, [sp, #104]	; 0x68
 8003046:	4654      	mov	r4, sl
 8003048:	2205      	movs	r2, #5
 800304a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800304e:	4858      	ldr	r0, [pc, #352]	; (80031b0 <_vfiprintf_r+0x24c>)
 8003050:	f000 faf8 	bl	8003644 <memchr>
 8003054:	9a04      	ldr	r2, [sp, #16]
 8003056:	b9d8      	cbnz	r0, 8003090 <_vfiprintf_r+0x12c>
 8003058:	06d1      	lsls	r1, r2, #27
 800305a:	bf44      	itt	mi
 800305c:	2320      	movmi	r3, #32
 800305e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003062:	0713      	lsls	r3, r2, #28
 8003064:	bf44      	itt	mi
 8003066:	232b      	movmi	r3, #43	; 0x2b
 8003068:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800306c:	f89a 3000 	ldrb.w	r3, [sl]
 8003070:	2b2a      	cmp	r3, #42	; 0x2a
 8003072:	d015      	beq.n	80030a0 <_vfiprintf_r+0x13c>
 8003074:	4654      	mov	r4, sl
 8003076:	2000      	movs	r0, #0
 8003078:	f04f 0c0a 	mov.w	ip, #10
 800307c:	9a07      	ldr	r2, [sp, #28]
 800307e:	4621      	mov	r1, r4
 8003080:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003084:	3b30      	subs	r3, #48	; 0x30
 8003086:	2b09      	cmp	r3, #9
 8003088:	d94e      	bls.n	8003128 <_vfiprintf_r+0x1c4>
 800308a:	b1b0      	cbz	r0, 80030ba <_vfiprintf_r+0x156>
 800308c:	9207      	str	r2, [sp, #28]
 800308e:	e014      	b.n	80030ba <_vfiprintf_r+0x156>
 8003090:	eba0 0308 	sub.w	r3, r0, r8
 8003094:	fa09 f303 	lsl.w	r3, r9, r3
 8003098:	4313      	orrs	r3, r2
 800309a:	46a2      	mov	sl, r4
 800309c:	9304      	str	r3, [sp, #16]
 800309e:	e7d2      	b.n	8003046 <_vfiprintf_r+0xe2>
 80030a0:	9b03      	ldr	r3, [sp, #12]
 80030a2:	1d19      	adds	r1, r3, #4
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	9103      	str	r1, [sp, #12]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	bfbb      	ittet	lt
 80030ac:	425b      	neglt	r3, r3
 80030ae:	f042 0202 	orrlt.w	r2, r2, #2
 80030b2:	9307      	strge	r3, [sp, #28]
 80030b4:	9307      	strlt	r3, [sp, #28]
 80030b6:	bfb8      	it	lt
 80030b8:	9204      	strlt	r2, [sp, #16]
 80030ba:	7823      	ldrb	r3, [r4, #0]
 80030bc:	2b2e      	cmp	r3, #46	; 0x2e
 80030be:	d10c      	bne.n	80030da <_vfiprintf_r+0x176>
 80030c0:	7863      	ldrb	r3, [r4, #1]
 80030c2:	2b2a      	cmp	r3, #42	; 0x2a
 80030c4:	d135      	bne.n	8003132 <_vfiprintf_r+0x1ce>
 80030c6:	9b03      	ldr	r3, [sp, #12]
 80030c8:	3402      	adds	r4, #2
 80030ca:	1d1a      	adds	r2, r3, #4
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	9203      	str	r2, [sp, #12]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	bfb8      	it	lt
 80030d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80030d8:	9305      	str	r3, [sp, #20]
 80030da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80031c0 <_vfiprintf_r+0x25c>
 80030de:	2203      	movs	r2, #3
 80030e0:	4650      	mov	r0, sl
 80030e2:	7821      	ldrb	r1, [r4, #0]
 80030e4:	f000 faae 	bl	8003644 <memchr>
 80030e8:	b140      	cbz	r0, 80030fc <_vfiprintf_r+0x198>
 80030ea:	2340      	movs	r3, #64	; 0x40
 80030ec:	eba0 000a 	sub.w	r0, r0, sl
 80030f0:	fa03 f000 	lsl.w	r0, r3, r0
 80030f4:	9b04      	ldr	r3, [sp, #16]
 80030f6:	3401      	adds	r4, #1
 80030f8:	4303      	orrs	r3, r0
 80030fa:	9304      	str	r3, [sp, #16]
 80030fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003100:	2206      	movs	r2, #6
 8003102:	482c      	ldr	r0, [pc, #176]	; (80031b4 <_vfiprintf_r+0x250>)
 8003104:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003108:	f000 fa9c 	bl	8003644 <memchr>
 800310c:	2800      	cmp	r0, #0
 800310e:	d03f      	beq.n	8003190 <_vfiprintf_r+0x22c>
 8003110:	4b29      	ldr	r3, [pc, #164]	; (80031b8 <_vfiprintf_r+0x254>)
 8003112:	bb1b      	cbnz	r3, 800315c <_vfiprintf_r+0x1f8>
 8003114:	9b03      	ldr	r3, [sp, #12]
 8003116:	3307      	adds	r3, #7
 8003118:	f023 0307 	bic.w	r3, r3, #7
 800311c:	3308      	adds	r3, #8
 800311e:	9303      	str	r3, [sp, #12]
 8003120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003122:	443b      	add	r3, r7
 8003124:	9309      	str	r3, [sp, #36]	; 0x24
 8003126:	e767      	b.n	8002ff8 <_vfiprintf_r+0x94>
 8003128:	460c      	mov	r4, r1
 800312a:	2001      	movs	r0, #1
 800312c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003130:	e7a5      	b.n	800307e <_vfiprintf_r+0x11a>
 8003132:	2300      	movs	r3, #0
 8003134:	f04f 0c0a 	mov.w	ip, #10
 8003138:	4619      	mov	r1, r3
 800313a:	3401      	adds	r4, #1
 800313c:	9305      	str	r3, [sp, #20]
 800313e:	4620      	mov	r0, r4
 8003140:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003144:	3a30      	subs	r2, #48	; 0x30
 8003146:	2a09      	cmp	r2, #9
 8003148:	d903      	bls.n	8003152 <_vfiprintf_r+0x1ee>
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0c5      	beq.n	80030da <_vfiprintf_r+0x176>
 800314e:	9105      	str	r1, [sp, #20]
 8003150:	e7c3      	b.n	80030da <_vfiprintf_r+0x176>
 8003152:	4604      	mov	r4, r0
 8003154:	2301      	movs	r3, #1
 8003156:	fb0c 2101 	mla	r1, ip, r1, r2
 800315a:	e7f0      	b.n	800313e <_vfiprintf_r+0x1da>
 800315c:	ab03      	add	r3, sp, #12
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	462a      	mov	r2, r5
 8003162:	4630      	mov	r0, r6
 8003164:	4b15      	ldr	r3, [pc, #84]	; (80031bc <_vfiprintf_r+0x258>)
 8003166:	a904      	add	r1, sp, #16
 8003168:	f3af 8000 	nop.w
 800316c:	4607      	mov	r7, r0
 800316e:	1c78      	adds	r0, r7, #1
 8003170:	d1d6      	bne.n	8003120 <_vfiprintf_r+0x1bc>
 8003172:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003174:	07d9      	lsls	r1, r3, #31
 8003176:	d405      	bmi.n	8003184 <_vfiprintf_r+0x220>
 8003178:	89ab      	ldrh	r3, [r5, #12]
 800317a:	059a      	lsls	r2, r3, #22
 800317c:	d402      	bmi.n	8003184 <_vfiprintf_r+0x220>
 800317e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003180:	f7ff fdbd 	bl	8002cfe <__retarget_lock_release_recursive>
 8003184:	89ab      	ldrh	r3, [r5, #12]
 8003186:	065b      	lsls	r3, r3, #25
 8003188:	f53f af12 	bmi.w	8002fb0 <_vfiprintf_r+0x4c>
 800318c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800318e:	e711      	b.n	8002fb4 <_vfiprintf_r+0x50>
 8003190:	ab03      	add	r3, sp, #12
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	462a      	mov	r2, r5
 8003196:	4630      	mov	r0, r6
 8003198:	4b08      	ldr	r3, [pc, #32]	; (80031bc <_vfiprintf_r+0x258>)
 800319a:	a904      	add	r1, sp, #16
 800319c:	f000 f882 	bl	80032a4 <_printf_i>
 80031a0:	e7e4      	b.n	800316c <_vfiprintf_r+0x208>
 80031a2:	bf00      	nop
 80031a4:	080037ec 	.word	0x080037ec
 80031a8:	0800380c 	.word	0x0800380c
 80031ac:	080037cc 	.word	0x080037cc
 80031b0:	0800382c 	.word	0x0800382c
 80031b4:	08003836 	.word	0x08003836
 80031b8:	00000000 	.word	0x00000000
 80031bc:	08002f3f 	.word	0x08002f3f
 80031c0:	08003832 	.word	0x08003832

080031c4 <_printf_common>:
 80031c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031c8:	4616      	mov	r6, r2
 80031ca:	4699      	mov	r9, r3
 80031cc:	688a      	ldr	r2, [r1, #8]
 80031ce:	690b      	ldr	r3, [r1, #16]
 80031d0:	4607      	mov	r7, r0
 80031d2:	4293      	cmp	r3, r2
 80031d4:	bfb8      	it	lt
 80031d6:	4613      	movlt	r3, r2
 80031d8:	6033      	str	r3, [r6, #0]
 80031da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031de:	460c      	mov	r4, r1
 80031e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80031e4:	b10a      	cbz	r2, 80031ea <_printf_common+0x26>
 80031e6:	3301      	adds	r3, #1
 80031e8:	6033      	str	r3, [r6, #0]
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	0699      	lsls	r1, r3, #26
 80031ee:	bf42      	ittt	mi
 80031f0:	6833      	ldrmi	r3, [r6, #0]
 80031f2:	3302      	addmi	r3, #2
 80031f4:	6033      	strmi	r3, [r6, #0]
 80031f6:	6825      	ldr	r5, [r4, #0]
 80031f8:	f015 0506 	ands.w	r5, r5, #6
 80031fc:	d106      	bne.n	800320c <_printf_common+0x48>
 80031fe:	f104 0a19 	add.w	sl, r4, #25
 8003202:	68e3      	ldr	r3, [r4, #12]
 8003204:	6832      	ldr	r2, [r6, #0]
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	42ab      	cmp	r3, r5
 800320a:	dc28      	bgt.n	800325e <_printf_common+0x9a>
 800320c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003210:	1e13      	subs	r3, r2, #0
 8003212:	6822      	ldr	r2, [r4, #0]
 8003214:	bf18      	it	ne
 8003216:	2301      	movne	r3, #1
 8003218:	0692      	lsls	r2, r2, #26
 800321a:	d42d      	bmi.n	8003278 <_printf_common+0xb4>
 800321c:	4649      	mov	r1, r9
 800321e:	4638      	mov	r0, r7
 8003220:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003224:	47c0      	blx	r8
 8003226:	3001      	adds	r0, #1
 8003228:	d020      	beq.n	800326c <_printf_common+0xa8>
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	68e5      	ldr	r5, [r4, #12]
 800322e:	f003 0306 	and.w	r3, r3, #6
 8003232:	2b04      	cmp	r3, #4
 8003234:	bf18      	it	ne
 8003236:	2500      	movne	r5, #0
 8003238:	6832      	ldr	r2, [r6, #0]
 800323a:	f04f 0600 	mov.w	r6, #0
 800323e:	68a3      	ldr	r3, [r4, #8]
 8003240:	bf08      	it	eq
 8003242:	1aad      	subeq	r5, r5, r2
 8003244:	6922      	ldr	r2, [r4, #16]
 8003246:	bf08      	it	eq
 8003248:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800324c:	4293      	cmp	r3, r2
 800324e:	bfc4      	itt	gt
 8003250:	1a9b      	subgt	r3, r3, r2
 8003252:	18ed      	addgt	r5, r5, r3
 8003254:	341a      	adds	r4, #26
 8003256:	42b5      	cmp	r5, r6
 8003258:	d11a      	bne.n	8003290 <_printf_common+0xcc>
 800325a:	2000      	movs	r0, #0
 800325c:	e008      	b.n	8003270 <_printf_common+0xac>
 800325e:	2301      	movs	r3, #1
 8003260:	4652      	mov	r2, sl
 8003262:	4649      	mov	r1, r9
 8003264:	4638      	mov	r0, r7
 8003266:	47c0      	blx	r8
 8003268:	3001      	adds	r0, #1
 800326a:	d103      	bne.n	8003274 <_printf_common+0xb0>
 800326c:	f04f 30ff 	mov.w	r0, #4294967295
 8003270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003274:	3501      	adds	r5, #1
 8003276:	e7c4      	b.n	8003202 <_printf_common+0x3e>
 8003278:	2030      	movs	r0, #48	; 0x30
 800327a:	18e1      	adds	r1, r4, r3
 800327c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003286:	4422      	add	r2, r4
 8003288:	3302      	adds	r3, #2
 800328a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800328e:	e7c5      	b.n	800321c <_printf_common+0x58>
 8003290:	2301      	movs	r3, #1
 8003292:	4622      	mov	r2, r4
 8003294:	4649      	mov	r1, r9
 8003296:	4638      	mov	r0, r7
 8003298:	47c0      	blx	r8
 800329a:	3001      	adds	r0, #1
 800329c:	d0e6      	beq.n	800326c <_printf_common+0xa8>
 800329e:	3601      	adds	r6, #1
 80032a0:	e7d9      	b.n	8003256 <_printf_common+0x92>
	...

080032a4 <_printf_i>:
 80032a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032a8:	460c      	mov	r4, r1
 80032aa:	7e27      	ldrb	r7, [r4, #24]
 80032ac:	4691      	mov	r9, r2
 80032ae:	2f78      	cmp	r7, #120	; 0x78
 80032b0:	4680      	mov	r8, r0
 80032b2:	469a      	mov	sl, r3
 80032b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80032b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032ba:	d807      	bhi.n	80032cc <_printf_i+0x28>
 80032bc:	2f62      	cmp	r7, #98	; 0x62
 80032be:	d80a      	bhi.n	80032d6 <_printf_i+0x32>
 80032c0:	2f00      	cmp	r7, #0
 80032c2:	f000 80d9 	beq.w	8003478 <_printf_i+0x1d4>
 80032c6:	2f58      	cmp	r7, #88	; 0x58
 80032c8:	f000 80a4 	beq.w	8003414 <_printf_i+0x170>
 80032cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80032d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80032d4:	e03a      	b.n	800334c <_printf_i+0xa8>
 80032d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80032da:	2b15      	cmp	r3, #21
 80032dc:	d8f6      	bhi.n	80032cc <_printf_i+0x28>
 80032de:	a001      	add	r0, pc, #4	; (adr r0, 80032e4 <_printf_i+0x40>)
 80032e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80032e4:	0800333d 	.word	0x0800333d
 80032e8:	08003351 	.word	0x08003351
 80032ec:	080032cd 	.word	0x080032cd
 80032f0:	080032cd 	.word	0x080032cd
 80032f4:	080032cd 	.word	0x080032cd
 80032f8:	080032cd 	.word	0x080032cd
 80032fc:	08003351 	.word	0x08003351
 8003300:	080032cd 	.word	0x080032cd
 8003304:	080032cd 	.word	0x080032cd
 8003308:	080032cd 	.word	0x080032cd
 800330c:	080032cd 	.word	0x080032cd
 8003310:	0800345f 	.word	0x0800345f
 8003314:	08003381 	.word	0x08003381
 8003318:	08003441 	.word	0x08003441
 800331c:	080032cd 	.word	0x080032cd
 8003320:	080032cd 	.word	0x080032cd
 8003324:	08003481 	.word	0x08003481
 8003328:	080032cd 	.word	0x080032cd
 800332c:	08003381 	.word	0x08003381
 8003330:	080032cd 	.word	0x080032cd
 8003334:	080032cd 	.word	0x080032cd
 8003338:	08003449 	.word	0x08003449
 800333c:	680b      	ldr	r3, [r1, #0]
 800333e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003342:	1d1a      	adds	r2, r3, #4
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	600a      	str	r2, [r1, #0]
 8003348:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800334c:	2301      	movs	r3, #1
 800334e:	e0a4      	b.n	800349a <_printf_i+0x1f6>
 8003350:	6825      	ldr	r5, [r4, #0]
 8003352:	6808      	ldr	r0, [r1, #0]
 8003354:	062e      	lsls	r6, r5, #24
 8003356:	f100 0304 	add.w	r3, r0, #4
 800335a:	d50a      	bpl.n	8003372 <_printf_i+0xce>
 800335c:	6805      	ldr	r5, [r0, #0]
 800335e:	600b      	str	r3, [r1, #0]
 8003360:	2d00      	cmp	r5, #0
 8003362:	da03      	bge.n	800336c <_printf_i+0xc8>
 8003364:	232d      	movs	r3, #45	; 0x2d
 8003366:	426d      	negs	r5, r5
 8003368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800336c:	230a      	movs	r3, #10
 800336e:	485e      	ldr	r0, [pc, #376]	; (80034e8 <_printf_i+0x244>)
 8003370:	e019      	b.n	80033a6 <_printf_i+0x102>
 8003372:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003376:	6805      	ldr	r5, [r0, #0]
 8003378:	600b      	str	r3, [r1, #0]
 800337a:	bf18      	it	ne
 800337c:	b22d      	sxthne	r5, r5
 800337e:	e7ef      	b.n	8003360 <_printf_i+0xbc>
 8003380:	680b      	ldr	r3, [r1, #0]
 8003382:	6825      	ldr	r5, [r4, #0]
 8003384:	1d18      	adds	r0, r3, #4
 8003386:	6008      	str	r0, [r1, #0]
 8003388:	0628      	lsls	r0, r5, #24
 800338a:	d501      	bpl.n	8003390 <_printf_i+0xec>
 800338c:	681d      	ldr	r5, [r3, #0]
 800338e:	e002      	b.n	8003396 <_printf_i+0xf2>
 8003390:	0669      	lsls	r1, r5, #25
 8003392:	d5fb      	bpl.n	800338c <_printf_i+0xe8>
 8003394:	881d      	ldrh	r5, [r3, #0]
 8003396:	2f6f      	cmp	r7, #111	; 0x6f
 8003398:	bf0c      	ite	eq
 800339a:	2308      	moveq	r3, #8
 800339c:	230a      	movne	r3, #10
 800339e:	4852      	ldr	r0, [pc, #328]	; (80034e8 <_printf_i+0x244>)
 80033a0:	2100      	movs	r1, #0
 80033a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033a6:	6866      	ldr	r6, [r4, #4]
 80033a8:	2e00      	cmp	r6, #0
 80033aa:	bfa8      	it	ge
 80033ac:	6821      	ldrge	r1, [r4, #0]
 80033ae:	60a6      	str	r6, [r4, #8]
 80033b0:	bfa4      	itt	ge
 80033b2:	f021 0104 	bicge.w	r1, r1, #4
 80033b6:	6021      	strge	r1, [r4, #0]
 80033b8:	b90d      	cbnz	r5, 80033be <_printf_i+0x11a>
 80033ba:	2e00      	cmp	r6, #0
 80033bc:	d04d      	beq.n	800345a <_printf_i+0x1b6>
 80033be:	4616      	mov	r6, r2
 80033c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80033c4:	fb03 5711 	mls	r7, r3, r1, r5
 80033c8:	5dc7      	ldrb	r7, [r0, r7]
 80033ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80033ce:	462f      	mov	r7, r5
 80033d0:	42bb      	cmp	r3, r7
 80033d2:	460d      	mov	r5, r1
 80033d4:	d9f4      	bls.n	80033c0 <_printf_i+0x11c>
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d10b      	bne.n	80033f2 <_printf_i+0x14e>
 80033da:	6823      	ldr	r3, [r4, #0]
 80033dc:	07df      	lsls	r7, r3, #31
 80033de:	d508      	bpl.n	80033f2 <_printf_i+0x14e>
 80033e0:	6923      	ldr	r3, [r4, #16]
 80033e2:	6861      	ldr	r1, [r4, #4]
 80033e4:	4299      	cmp	r1, r3
 80033e6:	bfde      	ittt	le
 80033e8:	2330      	movle	r3, #48	; 0x30
 80033ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80033ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80033f2:	1b92      	subs	r2, r2, r6
 80033f4:	6122      	str	r2, [r4, #16]
 80033f6:	464b      	mov	r3, r9
 80033f8:	4621      	mov	r1, r4
 80033fa:	4640      	mov	r0, r8
 80033fc:	f8cd a000 	str.w	sl, [sp]
 8003400:	aa03      	add	r2, sp, #12
 8003402:	f7ff fedf 	bl	80031c4 <_printf_common>
 8003406:	3001      	adds	r0, #1
 8003408:	d14c      	bne.n	80034a4 <_printf_i+0x200>
 800340a:	f04f 30ff 	mov.w	r0, #4294967295
 800340e:	b004      	add	sp, #16
 8003410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003414:	4834      	ldr	r0, [pc, #208]	; (80034e8 <_printf_i+0x244>)
 8003416:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800341a:	680e      	ldr	r6, [r1, #0]
 800341c:	6823      	ldr	r3, [r4, #0]
 800341e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003422:	061f      	lsls	r7, r3, #24
 8003424:	600e      	str	r6, [r1, #0]
 8003426:	d514      	bpl.n	8003452 <_printf_i+0x1ae>
 8003428:	07d9      	lsls	r1, r3, #31
 800342a:	bf44      	itt	mi
 800342c:	f043 0320 	orrmi.w	r3, r3, #32
 8003430:	6023      	strmi	r3, [r4, #0]
 8003432:	b91d      	cbnz	r5, 800343c <_printf_i+0x198>
 8003434:	6823      	ldr	r3, [r4, #0]
 8003436:	f023 0320 	bic.w	r3, r3, #32
 800343a:	6023      	str	r3, [r4, #0]
 800343c:	2310      	movs	r3, #16
 800343e:	e7af      	b.n	80033a0 <_printf_i+0xfc>
 8003440:	6823      	ldr	r3, [r4, #0]
 8003442:	f043 0320 	orr.w	r3, r3, #32
 8003446:	6023      	str	r3, [r4, #0]
 8003448:	2378      	movs	r3, #120	; 0x78
 800344a:	4828      	ldr	r0, [pc, #160]	; (80034ec <_printf_i+0x248>)
 800344c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003450:	e7e3      	b.n	800341a <_printf_i+0x176>
 8003452:	065e      	lsls	r6, r3, #25
 8003454:	bf48      	it	mi
 8003456:	b2ad      	uxthmi	r5, r5
 8003458:	e7e6      	b.n	8003428 <_printf_i+0x184>
 800345a:	4616      	mov	r6, r2
 800345c:	e7bb      	b.n	80033d6 <_printf_i+0x132>
 800345e:	680b      	ldr	r3, [r1, #0]
 8003460:	6826      	ldr	r6, [r4, #0]
 8003462:	1d1d      	adds	r5, r3, #4
 8003464:	6960      	ldr	r0, [r4, #20]
 8003466:	600d      	str	r5, [r1, #0]
 8003468:	0635      	lsls	r5, r6, #24
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	d501      	bpl.n	8003472 <_printf_i+0x1ce>
 800346e:	6018      	str	r0, [r3, #0]
 8003470:	e002      	b.n	8003478 <_printf_i+0x1d4>
 8003472:	0671      	lsls	r1, r6, #25
 8003474:	d5fb      	bpl.n	800346e <_printf_i+0x1ca>
 8003476:	8018      	strh	r0, [r3, #0]
 8003478:	2300      	movs	r3, #0
 800347a:	4616      	mov	r6, r2
 800347c:	6123      	str	r3, [r4, #16]
 800347e:	e7ba      	b.n	80033f6 <_printf_i+0x152>
 8003480:	680b      	ldr	r3, [r1, #0]
 8003482:	1d1a      	adds	r2, r3, #4
 8003484:	600a      	str	r2, [r1, #0]
 8003486:	681e      	ldr	r6, [r3, #0]
 8003488:	2100      	movs	r1, #0
 800348a:	4630      	mov	r0, r6
 800348c:	6862      	ldr	r2, [r4, #4]
 800348e:	f000 f8d9 	bl	8003644 <memchr>
 8003492:	b108      	cbz	r0, 8003498 <_printf_i+0x1f4>
 8003494:	1b80      	subs	r0, r0, r6
 8003496:	6060      	str	r0, [r4, #4]
 8003498:	6863      	ldr	r3, [r4, #4]
 800349a:	6123      	str	r3, [r4, #16]
 800349c:	2300      	movs	r3, #0
 800349e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034a2:	e7a8      	b.n	80033f6 <_printf_i+0x152>
 80034a4:	4632      	mov	r2, r6
 80034a6:	4649      	mov	r1, r9
 80034a8:	4640      	mov	r0, r8
 80034aa:	6923      	ldr	r3, [r4, #16]
 80034ac:	47d0      	blx	sl
 80034ae:	3001      	adds	r0, #1
 80034b0:	d0ab      	beq.n	800340a <_printf_i+0x166>
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	079b      	lsls	r3, r3, #30
 80034b6:	d413      	bmi.n	80034e0 <_printf_i+0x23c>
 80034b8:	68e0      	ldr	r0, [r4, #12]
 80034ba:	9b03      	ldr	r3, [sp, #12]
 80034bc:	4298      	cmp	r0, r3
 80034be:	bfb8      	it	lt
 80034c0:	4618      	movlt	r0, r3
 80034c2:	e7a4      	b.n	800340e <_printf_i+0x16a>
 80034c4:	2301      	movs	r3, #1
 80034c6:	4632      	mov	r2, r6
 80034c8:	4649      	mov	r1, r9
 80034ca:	4640      	mov	r0, r8
 80034cc:	47d0      	blx	sl
 80034ce:	3001      	adds	r0, #1
 80034d0:	d09b      	beq.n	800340a <_printf_i+0x166>
 80034d2:	3501      	adds	r5, #1
 80034d4:	68e3      	ldr	r3, [r4, #12]
 80034d6:	9903      	ldr	r1, [sp, #12]
 80034d8:	1a5b      	subs	r3, r3, r1
 80034da:	42ab      	cmp	r3, r5
 80034dc:	dcf2      	bgt.n	80034c4 <_printf_i+0x220>
 80034de:	e7eb      	b.n	80034b8 <_printf_i+0x214>
 80034e0:	2500      	movs	r5, #0
 80034e2:	f104 0619 	add.w	r6, r4, #25
 80034e6:	e7f5      	b.n	80034d4 <_printf_i+0x230>
 80034e8:	0800383d 	.word	0x0800383d
 80034ec:	0800384e 	.word	0x0800384e

080034f0 <_sbrk_r>:
 80034f0:	b538      	push	{r3, r4, r5, lr}
 80034f2:	2300      	movs	r3, #0
 80034f4:	4d05      	ldr	r5, [pc, #20]	; (800350c <_sbrk_r+0x1c>)
 80034f6:	4604      	mov	r4, r0
 80034f8:	4608      	mov	r0, r1
 80034fa:	602b      	str	r3, [r5, #0]
 80034fc:	f7fd fb70 	bl	8000be0 <_sbrk>
 8003500:	1c43      	adds	r3, r0, #1
 8003502:	d102      	bne.n	800350a <_sbrk_r+0x1a>
 8003504:	682b      	ldr	r3, [r5, #0]
 8003506:	b103      	cbz	r3, 800350a <_sbrk_r+0x1a>
 8003508:	6023      	str	r3, [r4, #0]
 800350a:	bd38      	pop	{r3, r4, r5, pc}
 800350c:	200001f4 	.word	0x200001f4

08003510 <__sread>:
 8003510:	b510      	push	{r4, lr}
 8003512:	460c      	mov	r4, r1
 8003514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003518:	f000 f8ae 	bl	8003678 <_read_r>
 800351c:	2800      	cmp	r0, #0
 800351e:	bfab      	itete	ge
 8003520:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003522:	89a3      	ldrhlt	r3, [r4, #12]
 8003524:	181b      	addge	r3, r3, r0
 8003526:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800352a:	bfac      	ite	ge
 800352c:	6563      	strge	r3, [r4, #84]	; 0x54
 800352e:	81a3      	strhlt	r3, [r4, #12]
 8003530:	bd10      	pop	{r4, pc}

08003532 <__swrite>:
 8003532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003536:	461f      	mov	r7, r3
 8003538:	898b      	ldrh	r3, [r1, #12]
 800353a:	4605      	mov	r5, r0
 800353c:	05db      	lsls	r3, r3, #23
 800353e:	460c      	mov	r4, r1
 8003540:	4616      	mov	r6, r2
 8003542:	d505      	bpl.n	8003550 <__swrite+0x1e>
 8003544:	2302      	movs	r3, #2
 8003546:	2200      	movs	r2, #0
 8003548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800354c:	f000 f868 	bl	8003620 <_lseek_r>
 8003550:	89a3      	ldrh	r3, [r4, #12]
 8003552:	4632      	mov	r2, r6
 8003554:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003558:	81a3      	strh	r3, [r4, #12]
 800355a:	4628      	mov	r0, r5
 800355c:	463b      	mov	r3, r7
 800355e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003566:	f000 b817 	b.w	8003598 <_write_r>

0800356a <__sseek>:
 800356a:	b510      	push	{r4, lr}
 800356c:	460c      	mov	r4, r1
 800356e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003572:	f000 f855 	bl	8003620 <_lseek_r>
 8003576:	1c43      	adds	r3, r0, #1
 8003578:	89a3      	ldrh	r3, [r4, #12]
 800357a:	bf15      	itete	ne
 800357c:	6560      	strne	r0, [r4, #84]	; 0x54
 800357e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003582:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003586:	81a3      	strheq	r3, [r4, #12]
 8003588:	bf18      	it	ne
 800358a:	81a3      	strhne	r3, [r4, #12]
 800358c:	bd10      	pop	{r4, pc}

0800358e <__sclose>:
 800358e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003592:	f000 b813 	b.w	80035bc <_close_r>
	...

08003598 <_write_r>:
 8003598:	b538      	push	{r3, r4, r5, lr}
 800359a:	4604      	mov	r4, r0
 800359c:	4608      	mov	r0, r1
 800359e:	4611      	mov	r1, r2
 80035a0:	2200      	movs	r2, #0
 80035a2:	4d05      	ldr	r5, [pc, #20]	; (80035b8 <_write_r+0x20>)
 80035a4:	602a      	str	r2, [r5, #0]
 80035a6:	461a      	mov	r2, r3
 80035a8:	f7fd facd 	bl	8000b46 <_write>
 80035ac:	1c43      	adds	r3, r0, #1
 80035ae:	d102      	bne.n	80035b6 <_write_r+0x1e>
 80035b0:	682b      	ldr	r3, [r5, #0]
 80035b2:	b103      	cbz	r3, 80035b6 <_write_r+0x1e>
 80035b4:	6023      	str	r3, [r4, #0]
 80035b6:	bd38      	pop	{r3, r4, r5, pc}
 80035b8:	200001f4 	.word	0x200001f4

080035bc <_close_r>:
 80035bc:	b538      	push	{r3, r4, r5, lr}
 80035be:	2300      	movs	r3, #0
 80035c0:	4d05      	ldr	r5, [pc, #20]	; (80035d8 <_close_r+0x1c>)
 80035c2:	4604      	mov	r4, r0
 80035c4:	4608      	mov	r0, r1
 80035c6:	602b      	str	r3, [r5, #0]
 80035c8:	f7fd fad9 	bl	8000b7e <_close>
 80035cc:	1c43      	adds	r3, r0, #1
 80035ce:	d102      	bne.n	80035d6 <_close_r+0x1a>
 80035d0:	682b      	ldr	r3, [r5, #0]
 80035d2:	b103      	cbz	r3, 80035d6 <_close_r+0x1a>
 80035d4:	6023      	str	r3, [r4, #0]
 80035d6:	bd38      	pop	{r3, r4, r5, pc}
 80035d8:	200001f4 	.word	0x200001f4

080035dc <_fstat_r>:
 80035dc:	b538      	push	{r3, r4, r5, lr}
 80035de:	2300      	movs	r3, #0
 80035e0:	4d06      	ldr	r5, [pc, #24]	; (80035fc <_fstat_r+0x20>)
 80035e2:	4604      	mov	r4, r0
 80035e4:	4608      	mov	r0, r1
 80035e6:	4611      	mov	r1, r2
 80035e8:	602b      	str	r3, [r5, #0]
 80035ea:	f7fd fad3 	bl	8000b94 <_fstat>
 80035ee:	1c43      	adds	r3, r0, #1
 80035f0:	d102      	bne.n	80035f8 <_fstat_r+0x1c>
 80035f2:	682b      	ldr	r3, [r5, #0]
 80035f4:	b103      	cbz	r3, 80035f8 <_fstat_r+0x1c>
 80035f6:	6023      	str	r3, [r4, #0]
 80035f8:	bd38      	pop	{r3, r4, r5, pc}
 80035fa:	bf00      	nop
 80035fc:	200001f4 	.word	0x200001f4

08003600 <_isatty_r>:
 8003600:	b538      	push	{r3, r4, r5, lr}
 8003602:	2300      	movs	r3, #0
 8003604:	4d05      	ldr	r5, [pc, #20]	; (800361c <_isatty_r+0x1c>)
 8003606:	4604      	mov	r4, r0
 8003608:	4608      	mov	r0, r1
 800360a:	602b      	str	r3, [r5, #0]
 800360c:	f7fd fad1 	bl	8000bb2 <_isatty>
 8003610:	1c43      	adds	r3, r0, #1
 8003612:	d102      	bne.n	800361a <_isatty_r+0x1a>
 8003614:	682b      	ldr	r3, [r5, #0]
 8003616:	b103      	cbz	r3, 800361a <_isatty_r+0x1a>
 8003618:	6023      	str	r3, [r4, #0]
 800361a:	bd38      	pop	{r3, r4, r5, pc}
 800361c:	200001f4 	.word	0x200001f4

08003620 <_lseek_r>:
 8003620:	b538      	push	{r3, r4, r5, lr}
 8003622:	4604      	mov	r4, r0
 8003624:	4608      	mov	r0, r1
 8003626:	4611      	mov	r1, r2
 8003628:	2200      	movs	r2, #0
 800362a:	4d05      	ldr	r5, [pc, #20]	; (8003640 <_lseek_r+0x20>)
 800362c:	602a      	str	r2, [r5, #0]
 800362e:	461a      	mov	r2, r3
 8003630:	f7fd fac9 	bl	8000bc6 <_lseek>
 8003634:	1c43      	adds	r3, r0, #1
 8003636:	d102      	bne.n	800363e <_lseek_r+0x1e>
 8003638:	682b      	ldr	r3, [r5, #0]
 800363a:	b103      	cbz	r3, 800363e <_lseek_r+0x1e>
 800363c:	6023      	str	r3, [r4, #0]
 800363e:	bd38      	pop	{r3, r4, r5, pc}
 8003640:	200001f4 	.word	0x200001f4

08003644 <memchr>:
 8003644:	4603      	mov	r3, r0
 8003646:	b510      	push	{r4, lr}
 8003648:	b2c9      	uxtb	r1, r1
 800364a:	4402      	add	r2, r0
 800364c:	4293      	cmp	r3, r2
 800364e:	4618      	mov	r0, r3
 8003650:	d101      	bne.n	8003656 <memchr+0x12>
 8003652:	2000      	movs	r0, #0
 8003654:	e003      	b.n	800365e <memchr+0x1a>
 8003656:	7804      	ldrb	r4, [r0, #0]
 8003658:	3301      	adds	r3, #1
 800365a:	428c      	cmp	r4, r1
 800365c:	d1f6      	bne.n	800364c <memchr+0x8>
 800365e:	bd10      	pop	{r4, pc}

08003660 <__malloc_lock>:
 8003660:	4801      	ldr	r0, [pc, #4]	; (8003668 <__malloc_lock+0x8>)
 8003662:	f7ff bb4b 	b.w	8002cfc <__retarget_lock_acquire_recursive>
 8003666:	bf00      	nop
 8003668:	200001ec 	.word	0x200001ec

0800366c <__malloc_unlock>:
 800366c:	4801      	ldr	r0, [pc, #4]	; (8003674 <__malloc_unlock+0x8>)
 800366e:	f7ff bb46 	b.w	8002cfe <__retarget_lock_release_recursive>
 8003672:	bf00      	nop
 8003674:	200001ec 	.word	0x200001ec

08003678 <_read_r>:
 8003678:	b538      	push	{r3, r4, r5, lr}
 800367a:	4604      	mov	r4, r0
 800367c:	4608      	mov	r0, r1
 800367e:	4611      	mov	r1, r2
 8003680:	2200      	movs	r2, #0
 8003682:	4d05      	ldr	r5, [pc, #20]	; (8003698 <_read_r+0x20>)
 8003684:	602a      	str	r2, [r5, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	f7fd fa40 	bl	8000b0c <_read>
 800368c:	1c43      	adds	r3, r0, #1
 800368e:	d102      	bne.n	8003696 <_read_r+0x1e>
 8003690:	682b      	ldr	r3, [r5, #0]
 8003692:	b103      	cbz	r3, 8003696 <_read_r+0x1e>
 8003694:	6023      	str	r3, [r4, #0]
 8003696:	bd38      	pop	{r3, r4, r5, pc}
 8003698:	200001f4 	.word	0x200001f4

0800369c <_init>:
 800369c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369e:	bf00      	nop
 80036a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036a2:	bc08      	pop	{r3}
 80036a4:	469e      	mov	lr, r3
 80036a6:	4770      	bx	lr

080036a8 <_fini>:
 80036a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036aa:	bf00      	nop
 80036ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ae:	bc08      	pop	{r3}
 80036b0:	469e      	mov	lr, r3
 80036b2:	4770      	bx	lr
